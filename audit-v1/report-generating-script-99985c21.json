{
  "schemaVersion": "2.0.0",
  "id": "99985c21-896d-4723-9522-f9c95279c6ee",
  "title": "Report Generating Script",
  "status": "EDITABLE",
  "version": null,
  "previousVersion": null,
  "metadata": {
    "index": "0",
    "createdAt": "1970-01-01T00:00:00.000Z",
    "lastUpdatedAt": "1970-01-01T00:00:00.000Z",
    "createdByRoleId": "44444444-4444-4444-4444-444444444444",
    "lastUpdatedByRoleId": "44444444-4444-4444-4444-444444444444",
    "editors": [],
    "typeIndex": "0"
  },
  "sourceInfo": {},
  "fields": {},
  "kind": "INSTANCE",
  "type": {
    "ref": {
      "id": "191b63bc-1863-4174-ac39-8e6d51e3d4e4"
    }
  },
  "content": {
    "type": "SCRIPT_CODE",
    "value": {
      "scriptCode": "import pandas as pd\nimport uuid\nimport json # Import json for pretty printing (debugging)\n\n# --- Configuration ---\n# Name of the template to create an instance of (the Audit Report Form template)\nAUDIT_REPORT_TEMPLATE_NAME = \"Audit Report Form\"\n\n# Names of the reference fields in the containing entity\n# whose referenced entities should be collated into the report.\n# Excludes \"SOP\" and the \"Audit Report Form\" field itself.\nREFERENCE_FIELDS_TO_COLLATE = [\n    \"CAPA Form\",\n    \"Audit Findings Log\",\n    \"Meeting Summary Form\",\n    \"Evidence Request Form\",\n    \"Root Cause Analysis Form\",\n    \"Question and Response Log\",\n    \"CAPA Effectiveness Review Form\",\n    \"Audit Completion Form\",\n    \"Internal Audit Notification\",\n]\n\n# Names of other fields from the containing entity\n# to include as text in the content of the new Audit Report Form instance.\nFIELDS_TO_INCLUDE_FROM_CONTAINING = [\n    \"Start Date\",\n    \"Lead Auditor\",\n    \"Other Auditors\",\n    \"Purpose of Audit\",\n    \"Summary of Audit\",\n    \"Description and Scope of Audit\",\n]\n\n# Name of the reference field in the containing entity\n# where the newly created Audit Report Form instance should be linked.\nAUDIT_REPORT_LINK_FIELD_NAME = \"Audit Report Form\"\n\n# Name of the reference field in the NEW Audit Report instance\n# that should link back to the containing Audit Checklist entity.\nAUDIT_MASTER_DOCUMENT_FIELD_NAME = \"Audit Master Document\"\n\n\n# --- Helper Function to format a single field value as text ---\ndef format_field_value_as_text(field_name, field_info):\n    \"\"\"\n    Formats a single field's value into a user-friendly text string.\n    Handles different data types. For complex types like Reference/Upload/Role,\n    it provides a summary string (e.g., list of titles or IDs).\n    \"\"\"\n    field_value = field_info.get(\"value\")\n    field_type = field_info.get(\"dataType\")\n\n    formatted_value = \"Blank\" # Default value if field_value is None\n\n    if field_value is not None:\n        if field_type == \"STRING\":\n            formatted_value = str(field_value)\n        elif field_type == \"NUMBER\":\n            formatted_value = str(field_value)\n        elif field_type == \"BOOLEAN\":\n            formatted_value = \"Yes\" if field_value else \"No\"\n        elif field_type == \"DATE\":\n            formatted_value = str(field_value) # ISO format date\n        elif field_type == \"DATETIME\":\n             formatted_value = str(field_value) # ISO format datetime\n        elif field_type == \"SELECT\":\n            if isinstance(field_value, list):\n                formatted_value = \", \".join([str(v) for v in field_value]) if field_value else \"None selected\"\n            else:\n                formatted_value = str(field_value)\n        elif field_type == \"ROLE\": # User field\n             if isinstance(field_value, list):\n                  # Getting user names from IDs requires fetching user entities, which can be complex.\n                  # For simplicity, list the IDs for now.\n                  formatted_value = \", \".join([str(v) for v in field_value]) if field_value else \"None selected\"\n             else:\n                  formatted_value = str(field_value) if field_value is not None else \"None selected\"\n        elif field_type == \"ENTITY\": # Reference field - list titles/IDs\n            if isinstance(field_value, list):\n                referenced_titles = []\n                for ref in field_value:\n                    try:\n                        # Attempt to get entity by ref, handle potential errors\n                        # Using get_entity_active_version might be more robust if you only care about active data\n                        ref_entity = seal.get_entity(ref=ref)\n                        referenced_titles.append(ref_entity.get(\"title\", ref.get(\"id\", \"Entity\")))\n                    except Exception as e:\n                        # Fallback to just showing the ID if fetching fails\n                        print(f\"Warning: Could not fetch referenced entity {ref.get('id')}: {e}\")\n                        referenced_titles.append(f\"ID: {ref.get('id', 'N/A')}\")\n                formatted_value = \", \".join(referenced_titles) if referenced_titles else \"None linked\"\n            # Handle single reference case (though schema implies list for REFERENCE)\n            elif isinstance(field_value, dict) and \"id\" in field_value:\n                 try:\n                    ref_entity = seal.get_entity(ref=field_value)\n                    formatted_value = ref_entity.get(\"title\", field_value.get(\"id\", \"Entity\"))\n                 except Exception as e:\n                    print(f\"Warning: Could not fetch single referenced entity {field_value.get('id')}: {e}\")\n                    formatted_value = f\"ID: {field_value.get('id', 'N/A')}\"\n                 else:\n                     formatted_value = \"None linked\"\n        elif field_type == \"UPLOAD\": # File field - list titles/IDs\n             # Upload value is typically an array of file IDs (strings)\n             if isinstance(field_value, list):\n                file_names = []\n                for file_item in field_value:\n                    file_id = file_item.get(\"id\") if isinstance(file_item, dict) else file_item # Handle both {id, version} and string ID\n                    if file_id and isinstance(file_id, str): # Ensure it's a non-empty string ID\n                        try:\n                            # Files are also entities, fetch them to get title/name\n                            # Use get_entity here as file entity versions are relevant\n                            file_entity = seal.get_entity(entity_id=file_id)\n                            file_names.append(file_entity.get(\"title\", file_id))\n                        except Exception as e:\n                            print(f\"Warning: Could not fetch file entity {file_id}: {e}\")\n                            file_names.append(f\"File ID: {file_id}\")\n                        # We are intentionally not embedding files here, just listing names\n                    else:\n                         file_names.append(\"Invalid File Ref\")\n                formatted_value = \", \".join(file_names) if file_names else \"None uploaded\"\n             # Handle single file case (though schema implies list), assuming it's an {id, version} dict or string ID\n             elif isinstance(field_value, dict) and \"id\" in field_value:\n                 file_id = field_value.get(\"id\")\n                 if file_id and isinstance(file_id, str):\n                     try:\n                        file_entity = seal.get_entity(entity_id=file_id)\n                        formatted_value = file_entity.get(\"title\", file_id)\n                     except Exception as e:\n                        print(f\"Warning: Could not fetch single file entity {file_id}: {e}\")\n                        formatted_value = f\"File ID: {file_id}\"\n                     # We are intentionally not embedding files here, just listing names\n                 else:\n                     formatted_value = \"Invalid File Ref\"\n             elif isinstance(field_value, str): # Handle single string ID case\n                 file_id = field_value\n                 try:\n                    file_entity = seal.get_entity(entity_id=file_id)\n                    formatted_value = file_entity.get(\"title\", file_id)\n                 except Exception as e:\n                    print(f\"Warning: Could not fetch single file entity {file_id}: {e}\")\n                    formatted_value = f\"File ID: {file_id}\"\n                 # We are intentionally not embedding files here, just listing names\n             else:\n                formatted_value = \"None uploaded\"\n\n    # Fallback for unhandled field types\n    return str(formatted_value) # Ensure it's a string\n\n\n# --- Helper Function to format entity data as text/image blocks ---\ndef format_entity_data_as_text_or_image_blocks(entity):\n    \"\"\"\n    Formats key information and field values from an entity into a list of text/image blocks.\n    Includes details for nested Reference/Upload fields, embedding files directly.\n    \"\"\"\n    blocks = []\n    entity_id = entity.get(\"id\")\n    entity_title = entity.get(\"title\", entity_id)\n    entity_status = entity.get(\"statusTag\", {}).get(\"text\", \"N/A\")\n    entity_kind = entity.get(\"kind\", \"Entity\")\n\n    # Add entity title and basic info as a sub-sub-heading (h4)\n    blocks.append(create_content_block(\"h4\", f\"{entity_kind}: {entity_title} (Status: {entity_status})\"))\n\n    # Add template info if it's an instance\n    source_info = entity.get(\"sourceInfo\", {})\n    template_ref = source_info.get(\"template\")\n    if template_ref:\n        try:\n            template_entity = seal.get_entity(ref=template_ref)\n            template_title = template_entity.get(\"title\", template_ref.get(\"id\", \"Template\"))\n            blocks.append(create_content_block(\"p\", f\"Template: {template_title}\"))\n        except Exception as e:\n             print(f\"Warning: Could not fetch template {template_ref.get('id')}: {e}\")\n             blocks.append(create_content_block(\"p\", f\"Template ID: {template_ref.get('id', 'N/A')}\"))\n\n\n    # Add fields as text or embedded images\n    fields = entity.get(\"fields\", {})\n    if fields:\n        for field_name, field_info in fields.items():\n            # Skip the back-reference field to the Audit Master Document to avoid recursion/redundancy\n            if field_name == AUDIT_MASTER_DOCUMENT_FIELD_NAME:\n                 continue\n\n            field_value = field_info.get(\"value\")\n            field_type = field_info.get(\"dataType\")\n\n            # For non-reference/upload fields, format as text\n            if field_type not in [\"ENTITY\", \"UPLOAD\"]:\n                 formatted_value = format_field_value_as_text(field_name, field_info)\n                 # Create a paragraph block for this field's formatted text (Name: Value)\n                 blocks.append(create_content_block(\"p\", f\"**{field_name}:** {formatted_value}\"))\n            else: # Handle Reference (ENTITY) and Upload (UPLOAD) fields\n                # Add field name as a paragraph\n                blocks.append(create_content_block(\"p\", f\"**{field_name}:**\")) # Use bold for reference field name\n\n                if field_value is not None:\n                    # Ensure field_value is a list for iteration\n                    referenced_items_list = field_value if isinstance(field_value, list) else [field_value]\n                    if referenced_items_list:\n                        # Check if ALL items are files. If so, just list them below the field name.\n                        # If mixed or non-files, use \"Referenced Items:\" label and list details.\n                        all_items_are_files = True\n                        for item in referenced_items_list:\n                             item_id = item.get(\"id\") if isinstance(item, dict) else item\n                             if item_id and isinstance(item_id, str):\n                                try:\n                                    referenced_item_entity = seal.get_entity(entity_id=item_id)\n                                    item_content = referenced_item_entity.get(\"content\")\n                                    item_content_type = item_content.get(\"type\") if item_content else None\n                                    if item_content_type != \"FILE\":\n                                         all_items_are_files = False\n                                         break\n                                except:\n                                    all_items_are_files = False # Assume not a file if fetch fails\n                                    break\n                             else:\n                                all_items_are_files = False # Invalid ref format\n                                break\n\n                        if all_items_are_files:\n                             # Just list the files below the field name (no \"Referenced Items:\" label)\n                             for item in referenced_items_list:\n                                item_id = item.get(\"id\") if isinstance(item, dict) else item\n                                item_version = item.get(\"version\") if isinstance(item, dict) else None # Get version for REFERENCE\n                                if item_id and isinstance(item_id, str):\n                                     try:\n                                         referenced_item_entity = seal.get_entity(entity_id=item_id)\n                                         file_value = referenced_item_entity.get(\"content\", {}).get(\"value\")\n                                         file_id_in_content = file_value.get(\"fileId\") if file_value else None\n\n                                         if file_id_in_content:\n                                             print(f\"Embedding file as image: {referenced_item_entity.get('title', item_id)}\")\n                                             # Create an 'image' type block referencing the file entity\n                                             blocks.append({\n                                                \"id\": str(uuid.uuid4()),\n                                                \"type\": \"image\", # Use type \"image\"\n                                                \"children\": [{\"text\": \"\"}], # Required empty text child\n                                                \"entityId\": item_id, # Reference the file entity ID\n                                                \"version\": item_version, # Include version if available\n                                                \"entityPreview\": {\"isPreview\": True} # Enable preview rendering\n                                             })\n                                         else:\n                                            print(f\"Warning: File ID not found in file entity {item_id}. Skipping embedding.\")\n                                     except Exception as e:\n                                         print(f\"Warning: Could not fetch referenced item {item_id} for embedding: {e}\")\n                                else:\n                                     print(f\"Warning: Invalid reference item format in field '{field_name}': {item}. Skipping embedding.\")\n\n                        else:\n                             # If mixed or non-files, use \"Referenced Items:\" label and list details as text\n                             blocks.append(create_content_block(\"p\", \"Referenced Items:\")) # Label for nested items\n                             for item in referenced_items_list:\n                                item_id = item.get(\"id\") if isinstance(item, dict) else item\n                                if item_id and isinstance(item_id, str):\n                                     try:\n                                        referenced_item_entity = seal.get_entity(entity_id=item_id)\n                                        item_title = referenced_item_entity.get(\"title\", item_id)\n                                        item_type_title = \"Unknown Type\"\n                                        if referenced_item_entity.get(\"type\") and referenced_item_entity[\"type\"].get(\"ref\") and referenced_item_entity[\"type\"][\"ref\"].get(\"id\"):\n                                             try:\n                                                type_entity = seal.get_entity(entity_id=referenced_item_entity[\"type\"][\"ref\"][\"id\"])\n                                                item_type_title = type_entity.get(\"title\", \"Unknown Type\")\n                                             except:\n                                                 pass\n\n                                        item_kind = referenced_item_entity.get(\"kind\", \"Item\")\n                                        blocks.append(create_content_block(\"p\", f\"- {item_kind}: {item_title} (Type: {item_type_title})\"))\n\n                                     except Exception as e:\n                                        print(f\"Warning: Could not fetch referenced item {item_id}: {e}\")\n                                        blocks.append(create_content_block(\"p\", f\"- Error fetching item {item_id}: {e}\"))\n                                else:\n                                     print(f\"Warning: Invalid reference item format in field '{field_name}': {item}\")\n                                     blocks.append(create_content_block(\"p\", f\"- Invalid item reference in field '{field_name}': {item}\"))\n\n                    else:\n                         blocks.append(create_content_block(\"p\", \"No items linked.\"))\n                else:\n                     blocks.append(create_content_block(\"p\", \"No items linked.\"))\n\n\n    else:\n         blocks.append(create_content_block(\"p\", \"No standard fields found.\")) # Add this if no fields\n\n\n    return blocks\n\n# --- Helper function to create simple content blocks ---\ndef create_content_block(block_type, text=\"\"):\n    \"\"\"Creates a simple content block (h3, p, h4, image) with basic text children, sanitizing text.\"\"\"\n    block_id = str(uuid.uuid4())\n    # Ensure the text is always a string and sanitize it\n    safe_text = str(text or \"\").encode('utf-8', 'replace').decode('utf-8') # Handle None or empty input\n\n    # Base block structure\n    block = {\n        \"id\": block_id,\n        \"type\": block_type,\n        \"children\": [{\"text\": safe_text}] # Always include a text child\n    }\n\n    # Specific handling for 'image' type blocks (they might not need text children or have different properties)\n    # Let's stick to the structure that failed last time for 'file' but with 'image' type\n    # and see if it works. If not, we might need to adjust based on actual API schema for 'image' blocks.\n    if block_type == \"image\":\n        # The structure for 'image' block with entity reference is likely different\n        # Revert to the structure that seems plausible based on other embedded types\n         return {\n            \"id\": block_id,\n            \"type\": \"image\", # Use type \"image\"\n            \"children\": [{\"text\": \"\"}], # Often required empty text child\n            # entityId and version will be added by the caller (format_entity_data_as_text_or_image_blocks)\n            # entityPreview will also be added by the caller\n         }\n\n\n    return block\n\n# --- Main Script Logic ---\n\n# 1. Get the containing entity (the Audit Checklist instance)\ncontaining_entity = seal.get_containing_entity()\ncontaining_entity_id = containing_entity.get(\"id\")\ncontaining_fields = containing_entity.get(\"fields\", {})\ncontaining_entity_title = containing_entity.get(\"title\", containing_entity_id)\n\nprint(f\"Processing Audit Checklist instance: {containing_entity_title}\")\n\n# 2. Check if an Audit Report entity is already linked\nreport_entity_id = None\naudit_report_link_field = containing_fields.get(AUDIT_REPORT_LINK_FIELD_NAME)\n\nif audit_report_link_field and audit_report_link_field.get(\"value\"):\n    current_refs = audit_report_link_field[\"value\"]\n    if current_refs and isinstance(current_refs, list) and len(current_refs) > 0:\n        # Assuming the link field is single-value, take the first reference\n        linked_report_ref = current_refs[0]\n        linked_report_id = linked_report_ref.get(\"id\")\n        if linked_report_id:\n            try:\n                # Verify the linked entity exists and is an instance\n                linked_entity = seal.get_entity(linked_report_id)\n                if linked_entity.get(\"kind\") == \"INSTANCE\":\n                    report_entity_id = linked_report_id\n                    print(f\"Found existing linked Audit Report instance: {report_entity_id}. Will update this entity.\")\n                else:\n                    print(f\"Warning: Linked entity {linked_report_id} is not an instance or does not exist. Will create a new report.\")\n            except Exception as e:\n                print(f\"Warning: Could not fetch linked entity {linked_report_id}: {e}. Will create a new report.\")\n        else:\n             print(f\"Warning: Found invalid reference in '{AUDIT_REPORT_LINK_FIELD_NAME}'. Will create a new report.\")\n    else:\n        print(f\"No existing linked Audit Report instance found in '{AUDIT_REPORT_LINK_FIELD_NAME}'. Will create a new report.\")\nelse:\n    print(f\"Reference field '{AUDIT_REPORT_LINK_FIELD_NAME}' is empty or does not exist. Will create a new report.\")\n\n\n# 3. If no existing report was found, create a new one\nif report_entity_id is None:\n    print(\"Creating a new Audit Report instance...\")\n    audit_report_template_id = None\n    try:\n        search_query = {\n            \"filters\": {\n                \"kind\": [\"TEMPLATE\"],\n                \"text\": [AUDIT_REPORT_TEMPLATE_NAME]\n            }\n        }\n        templates = seal.search_entities(search_query)\n        if templates:\n            # Assuming the first result is the correct template\n            audit_report_template_id = templates[0][\"id\"]\n            print(f\"Found '{AUDIT_REPORT_TEMPLATE_NAME}' template with ID: {audit_report_template_id}\")\n        else:\n            raise Exception(f\"Template '{AUDIT_REPORT_TEMPLATE_NAME}' not found.\")\n    except Exception as e:\n        seal.throw_error(f\"Error finding template '{AUDIT_REPORT_TEMPLATE_NAME}': {e}\")\n\n    try:\n        # Construct the desired title\n        new_report_title = f\"Audit Report - {containing_entity_title}\"\n\n        # Create the instance with the specified title\n        new_report_instance = seal.create_instance_from_template(\n            template_id=audit_report_template_id,\n            title=new_report_title # Set the custom title here\n        )\n        report_entity_id = new_report_instance[\"id\"]\n        print(f\"Created new '{AUDIT_REPORT_TEMPLATE_NAME}' instance with ID: {report_entity_id} and title '{new_report_title}'\")\n\n        # Populate the 'Audit Master Document' field in the new instance\n        try:\n            # The value for a REFERENCE field is a list of reference objects\n            containing_entity_ref_value = [{\"id\": containing_entity_id, \"version\": None}] # version=None for latest\n\n            seal.update_field_value_in_entity(\n                entity_id=report_entity_id,\n                field_name=AUDIT_MASTER_DOCUMENT_FIELD_NAME,\n                field_value=containing_entity_ref_value\n            )\n            print(f\"Populated '{AUDIT_MASTER_DOCUMENT_FIELD_NAME}' field in new instance {report_entity_id} with reference to containing entity {containing_entity_id}.\")\n\n        except Exception as e:\n            print(f\"Warning: Could not populate '{AUDIT_MASTER_DOCUMENT_FIELD_NAME}' field in new instance {report_entity_id}: {e}\")\n            # Continue execution, as populating this field might not be strictly critical\n            # depending on template configuration.\n\n        # Link the new entity back to the containing entity\n        try:\n            # Ensure the containing entity is editable\n            # This should not happen if the script is run from an action button on it.\n            # However, adding this check makes the script more robust.\n            containing_entity_reloaded = seal.get_entity(containing_entity_id) # Re-fetch to ensure it's editable\n            if containing_entity_reloaded[\"status\"] != \"EDITABLE\":\n                 print(f\"Containing entity {containing_entity_id} is not editable. Making it editable.\")\n                 seal.make_entity_editable(containing_entity_id)\n                 # Need to re-fetch entity again to get the editable version\n                 containing_entity_reloaded = seal.get_entity(containing_entity_id)\n                 containing_fields = containing_entity_reloaded.get(\"fields\", {}) # Re-get fields\n\n            audit_report_link_field_reloaded = containing_fields.get(AUDIT_REPORT_LINK_FIELD_NAME) # Re-get field info\n\n            if audit_report_link_field_reloaded:\n                # Get current references in the link field (should be empty if it was just created)\n                current_refs = audit_report_link_field_reloaded.get(\"value\") or []\n\n                # Add the new entity's reference\n                new_ref = {\"id\": report_entity_id, \"version\": None} # Link to the latest version (draft)\n\n                allow_multiple = audit_report_link_field_reloaded.get(\"config\", {}).get(\"allowMultiple\", False)\n\n                if allow_multiple:\n                     # Check if the reference already exists to avoid duplicates\n                     if not any(r[\"id\"] == new_ref[\"id\"] for r in current_refs):\n                         updated_refs = current_refs + [new_ref]\n                     else:\n                         updated_refs = current_refs\n                         print(f\"New Audit Report instance {report_entity_id} is already linked.\")\n                else:\n                    # If single value only, replace the current value\n                    updated_refs = [new_ref]\n\n                # Only update if the list of references has actually changed\n                seal.update_field_value_in_entity(\n                    entity_id=containing_entity_id,\n                    field_name=AUDIT_REPORT_LINK_FIELD_NAME,\n                    field_value=updated_refs\n                )\n                print(f\"Linked new Audit Report instance {report_entity_id} to field '{AUDIT_REPORT_LINK_FIELD_NAME}' in containing entity.\")\n            else:\n                 print(f\"Warning: Reference field '{AUDIT_REPORT_LINK_FIELD_NAME}' not found in containing entity. Cannot link report back.\")\n\n        except Exception as e:\n            print(f\"Error linking new instance {report_entity_id} back to containing entity {containing_entity_id}: {e}\")\n            # This error is less critical, don't necessarily throw a hard error that stops the script\n            # unless linking is a mandatory part of the process. Let's just print a warning.\n\n\n    except Exception as e:\n        seal.throw_error(f\"Error creating new instance of '{AUDIT_REPORT_TEMPLATE_NAME}': {e}\")\n\n\n# 4. Ensure the target report entity is editable before updating its content\n# This applies to both newly created and existing entities\nif report_entity_id:\n    try:\n        current_report_entity = seal.get_entity(report_entity_id)\n        if current_report_entity[\"status\"] != \"EDITABLE\":\n            print(f\"Audit Report instance {report_entity_id} is not editable. Making it editable.\")\n            seal.make_entity_editable(report_entity_id)\n            # No need to re-fetch, make_entity_editable returns the new draft\n\n    except Exception as e:\n        seal.throw_error(f\"Error ensuring Audit Report instance {report_entity_id} is editable: {e}\")\n\n\n# 5. Generate the page content blocks for the Audit Report (as text and embedded files)\nfinal_page_content_blocks = []\n\n# Add Audit Details heading\nfinal_page_content_blocks.append(create_content_block(\"h3\", \"Audit Details\"))\n\n# Add fields from the containing entity as text\nfor field_name in FIELDS_TO_INCLUDE_FROM_CONTAINING:\n    field_info = containing_fields.get(field_name)\n    if field_info:\n        formatted_value = format_field_value_as_text(field_name, field_info)\n        # Add field name as h3, value as paragraph\n        final_page_content_blocks.append(create_content_block(\"h3\", field_name))\n        final_page_content_blocks.append(create_content_block(\"p\", formatted_value))\n    else:\n        print(f\"Warning: Field '{field_name}' not found in containing entity.\")\n\nfinal_page_content_blocks.append(create_content_block(\"p\", \"\")) # Add a blank line for spacing\n\n\n# Add Collated Entities heading\nfinal_page_content_blocks.append(create_content_block(\"h3\", \"Associated Forms and Logs\"))\n\n# Add collated entities from specified reference fields (embedding files)\nfor field_name in REFERENCE_FIELDS_TO_COLLATE:\n    ref_field = containing_fields.get(field_name)\n    if ref_field and ref_field.get(\"value\"):\n        referenced_entities_refs = ref_field[\"value\"]\n        print(f\"Collating entities from '{field_name}' ({len(referenced_entities_refs)} entities)....\")\n\n        # Add a sub-heading for each section (the reference field name)\n        final_page_content_blocks.append(create_content_block(\"h3\", field_name))\n\n        if referenced_entities_refs:\n            for ref in referenced_entities_refs:\n                try:\n                    # Fetch the referenced entity\n                    referenced_entity = seal.get_entity(ref=ref)\n                    # Format the referenced entity's data into text/image blocks\n                    entity_blocks = format_entity_data_as_text_or_image_blocks(referenced_entity)\n                    final_page_content_blocks.extend(entity_blocks)\n                    # Add a separator line between collated entities\n                    final_page_content_blocks.append(create_content_block(\"p\", \"---\"))\n                except Exception as e:\n                    print(f\"Warning: Failed to fetch or format referenced entity {ref.get('id')}: {e}\")\n                    final_page_content_blocks.append(create_content_block(\"p\", f\"Error fetching or formatting entity {ref.get('id', 'N/A')}: {e}\"))\n\n        else:\n             final_page_content_blocks.append(create_content_block(\"p\", \"No entities linked.\"))\n\n    else:\n        print(f\"No entities found in '{field_name}' or field does not exist in containing entity.\")\n\nfinal_page_content_blocks.append(create_content_block(\"p\", \"\")) # Add a blank line at the end\n\n# Print the generated page content blocks for debugging\nprint(\"Generated page content blocks:\")\nprint(json.dumps(final_page_content_blocks, indent=2))\n\n\n# 6. Update the content of the target Audit Report entity with the generated text blocks\nif report_entity_id:\n    try:\n        # Use the REST API to update the content\n        seal._request(\n            url=f\"entities/{report_entity_id}/content\",\n            method=\"PATCH\",\n            json={\n                \"content\": {\n                    \"type\": \"PAGE_CONTENT\",\n                    \"value\": {\n                        \"pageContent\": final_page_content_blocks\n                    }\n                }\n            }\n        )\n        print(f\"Updated content of Audit Report instance {report_entity_id}\")\n\n    except Exception as e:\n        # If updating content fails for a newly created entity, archive it.\n        # If it fails for an existing entity, just log the error.\n        # Check if the entity was newly created in this specific run\n        is_newly_created = False\n        # Check if new_report_instance variable exists and its ID matches report_entity_id\n        if 'new_report_instance' in locals() and new_report_instance.get(\"id\") == report_entity_id:\n             is_newly_created = True\n\n        if is_newly_created:\n             print(f\"Error updating content of newly created instance {report_entity_id}: {e}. Attempting to archive.\")\n             try:\n                 seal.archive_entity(report_entity_id, archive=True)\n                 print(f\"Archived failed new instance {report_entity_id}\")\n             except Exception as archive_e:\n                 print(f\"Error archiving failed instance {report_entity_id}: {archive_e}\")\n        else:\n             print(f\"Error updating content of existing instance {report_entity_id}: {e}\")\n\n        # Re-raise the exception to indicate script failure\n        seal.throw_error(f\"Error updating content: {e}\")\n\nelse:\n    print(\"No Audit Report entity found or created to update content for.\")\n\n\nprint(\"Script finished.\")"
    }
  }
}
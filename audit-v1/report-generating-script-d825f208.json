{
  "schemaVersion": "2.0.0",
  "id": "d825f208-ae0d-4ae3-a283-7b3fd7a91c36",
  "title": "Report Generating Script",
  "status": "EDITABLE",
  "version": null,
  "previousVersion": null,
  "metadata": {
    "index": "0",
    "createdAt": "1970-01-01T00:00:00.000Z",
    "lastUpdatedAt": "1970-01-01T00:00:00.000Z",
    "createdByRoleId": "44444444-4444-4444-4444-444444444444",
    "lastUpdatedByRoleId": "44444444-4444-4444-4444-444444444444",
    "editors": [],
    "typeIndex": "0"
  },
  "sourceInfo": {},
  "fields": {},
  "kind": "INSTANCE",
  "type": {
    "ref": {
      "id": "191b63bc-1863-4174-ac39-8e6d51e3d4e4"
    }
  },
  "content": {
    "type": "SCRIPT_CODE",
    "value": {
      "scriptCode": "import pandas as pd\nimport os # Needed for temporary file handling\nimport time # Needed for unique temporary filenames\nfrom datetime import datetime\nfrom dateutil.parser import isoparse # For parsing ISO date strings\n\n# Import the necessary components from reportlab\n# Assume reportlab is installed in the script environment\ntry:\n    from reportlab.lib.pagesizes import letter\n    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image # Import Image\n    from reportlab.lib.styles import getSampleStyleSheet\nexcept ImportError:\n    print(\"Error: reportlab library not found. Please ensure it is installed or contact Seal support.\")\n    # Exit the script or handle the error appropriately if the library is missing\n    exit()\n\n\n# Define the names of the reference fields\nSELECT_ENTITIES_FIELD_NAME = \"Select Entities\"\nAUDIT_MASTER_DOCUMENT_FIELD_NAME = \"Audit Master Document\"\nAUDIT_REPORT_FIELD_NAME = \"Audit Report Generated\"\n# Define the name of the type for the generated PDF file\n# Ensure a Type with this name and 'File' content type exists in your organization\nPDF_FILE_TYPE_NAME = \"File\" # Assuming a standard 'File' type exists\n\n# Get the entity the script is embedded in\ncontaining_entity = seal.get_containing_entity()\n\n# --- Get the Audit Master Document Title ---\naudit_master_title = \"Untitled Audit Master\" # Default title\nif AUDIT_MASTER_DOCUMENT_FIELD_NAME in containing_entity.get(\"fields\", {}):\n    audit_master_field = containing_entity[\"fields\"][AUDIT_MASTER_DOCUMENT_FIELD_NAME]\n    if audit_master_field.get(\"dataType\") == \"ENTITY\" and audit_master_field.get(\"value\"):\n        master_doc_ref_list = audit_master_field[\"value\"]\n        if master_doc_ref_list and isinstance(master_doc_ref_list, list) and len(master_doc_ref_list) > 0:\n            master_doc_ref = master_doc_ref_list[0]\n            try:\n                # Get the referenced Audit Master Document entity\n                master_doc_entity = seal.get_entity(ref=master_doc_ref)\n                audit_master_title = master_doc_entity.get(\"title\", audit_master_title)\n                print(f\"Retrieved Audit Master Document title: {audit_master_title}\")\n            except Exception as e:\n                print(f\"Error retrieving Audit Master Document {master_doc_ref.get('id')}: {e}\")\n                # Keep default title if retrieval fails\n\n# Construct the desired PDF filename and entity title\ngenerated_file_title = f\"Audit Report - {audit_master_title}\"\ngenerated_file_name = f\"{generated_file_title}.pdf\"\n\n\n# Check if the 'Select Entities' field exists and has values\nif SELECT_ENTITIES_FIELD_NAME in containing_entity.get(\"fields\", {}):\n    select_entities_field = containing_entity[\"fields\"][SELECT_ENTITIES_FIELD_NAME]\n\n    # Ensure the field is a REFERENCE type and has values\n    if select_entities_field.get(\"dataType\") == \"ENTITY\" and select_entities_field.get(\"value\"):\n        referenced_entity_refs = select_entities_field[\"value\"]\n\n        referenced_entities = []\n        print(f\"Retrieving {len(referenced_entity_refs)} referenced entities...\\n\") # Added newline for clarity\n        for ref in referenced_entity_refs:\n            try:\n                # Get the entity using its reference (id and optional version)\n                # Using get_entity_active_version might be useful for audit reports\n                # entity_data = seal.get_entity_active_version(ref['id'])\\\\n\n                entity_data = seal.get_entity(ref=ref) # Gets the specific version referenced, or latest if version is None\n                # Successfully retrieved, append to list\n                referenced_entities.append(entity_data)\n                print(f\"Successfully retrieved entity: {entity_data.get('title', ref['id'])}, Version: {entity_data.get('version', 'Draft')}\")\n            except Exception as e:\n                print(f\"Error retrieving entity {ref.get('id')}: {e}\")\n                # For this example, we'll just print the error and skip adding this entity\n\n\n        # --- PDF Generation Step using ReportLab ---\n        generated_pdf_path = \"/tmp/collated_audit_report.pdf\" # Temporary path in the script environment\n        pdf_generated_successfully = False\n\n        if referenced_entities:\n            print(\"Attempting to generate PDF...\")\n            try:\n                doc = SimpleDocTemplate(generated_pdf_path, pagesize=letter)\n                styles = getSampleStyleSheet()\n                story = []\n\n                story.append(Paragraph(generated_file_title, styles['h1'])) # Use the generated title\n                story.append(Spacer(1, 12))\n\n                for entity in referenced_entities:\n                    # --- Add Template Title as Heading ---\n                    template_title = \"Unknown Template\"\n                    # Use 'templatedFrom' property to get the template reference\n                    template_ref = entity.get('templatedFrom', {})\n                    if template_ref and template_ref.get('id'):\n                        try:\n                            # Get the referenced Template entity\n                            template_entity = seal.get_entity(ref=template_ref)\n                            template_title = template_entity.get('title', template_title)\n                            print(f\"Retrieved template title for entity {entity.get('title', entity.get('id'))}: {template_title}\")\n                        except Exception as e:\n                            print(f\"Error retrieving template {template_ref.get('id')} for entity {entity.get('title', entity.get('id'))}: {e}\")\n\n                    story.append(Paragraph(f\"<b>Template:</b> {template_title}\", styles['h2'])) # Add template title\n                    story.append(Paragraph(f\"<b>Entity Title:</b> {entity.get('title', 'Untitled Entity')}\", styles['h2']))\n                    story.append(Paragraph(f\"<b>ID:</b> {entity.get('id')}, <b>Version:</b> {entity.get('version', 'Draft')}\", styles['Normal']))\n                    story.append(Spacer(1, 6)) # Add a small space after entity header\n\n                    # Check if the entity is a File entity\n                    if entity.get('content', {}).get('type') == 'FILE':\n                        file_id = entity.get('content', {}).get('value', {}).get('fileId')\n                        if file_id:\n                            print(f\"Attempting to render file entity: {entity.get('title', entity.get('id'))}\")\n                            temp_file_path = None\n                            try:\n                                # Download the file content for this specific entity version\n                                # Use the ID and version from the retrieved entity_data in a ref object\n                                temp_file_path = seal.download_file(ref={'id': entity['id'], 'version': entity.get('version')})\n\n                                if temp_file_path and os.path.exists(temp_file_path):\n                                    # Check if it's an image file based on extension\n                                    filename = os.path.basename(temp_file_path).lower()\n                                    if filename.endswith(('.png', '.jpg', '.jpeg', '.gif')):\n                                        print(f\"Adding image file {filename} to PDF.\")\n                                        # Add image to story\n                                        img = Image(temp_file_path)\n                                        # Scale image to fit within page width, maintaining aspect ratio\n                                        page_width, page_height = letter # Get dimensions of the page size (letter)\n                                        margin = 72 # Standard margin in points (1 inch)\n                                        max_width = page_width - 2 * margin\n                                        img_width, img_height = img.size\n\n                                        # Calculate drawing width and height, maintaining aspect ratio\n                                        if img_width > max_width:\n                                            img.drawWidth = max_width\n                                            img.drawHeight = max_width * (img_height / img_width)\n                                        else:\n                                            img.drawWidth = img_width\n                                            img.drawHeight = img_height\n\n                                        story.append(img)\n                                        story.append(Spacer(1, 6)) # Space after image\n                                    else:\n                                        print(f\"File {filename} is not a supported image type for direct rendering, skipping.\")\n                                        # Optionally add a placeholder text\n                                        story.append(Paragraph(f\"<i>File:</i> {entity.get('title', filename)} (Unsupported format)\", styles['Normal']))\n                                        story.append(Spacer(1, 6))\n\n                                else:\n                                     print(f\"Downloaded file not found at {temp_file_path}, skipping.\")\n                                     story.append(Paragraph(f\"<i>File:</i> {entity.get('title', entity.get('id'))} (Download Error)\", styles['Normal']))\n                                     story.append(Spacer(1, 6))\n\n                            except Exception as e:\n                                print(f\"Error downloading or rendering file {entity.get('title', entity.get('id'))}: {e}\")\n                                story.append(Paragraph(f\"<i>File:</i> {entity.get('title', entity.get('id'))} (Rendering Error)\", styles['Normal']))\n                                story.append(Spacer(1, 6))\n                            finally:\n                                # Clean up the temporary downloaded file\n                                if temp_file_path and os.path.exists(temp_file_path):\n                                    try:\n                                        os.remove(temp_file_path)\n                                        # print(f\"Cleaned up temporary file: {temp_file_path}\") # Keep logs clean unless debugging\n                                    except Exception as cleanup_error:\n                                        print(f\"Error cleaning up temporary file {temp_file_path}: {cleanup_error}\")\n\n                    else: # It's not a File entity, process fields as before\n                        # --- Add specific field values to the PDF ---\n                        story.append(Paragraph(\"<b>Fields:</b>\", styles['h3']))\n                        fields = entity.get('fields', {})\n                        if fields:\n                            for field_name, field_data in fields.items():\n                                 field_value = field_data.get('value', 'N/A')\n                                 value_str = 'N/A' # Default string representation\n                                 field_type = field_data.get('type')\n                                 field_dataType = field_data.get('dataType')\n\n                                 if isinstance(field_value, list):\n                                     if field_type == 'USER': # --- Handle USER fields (list of user IDs) ---\n                                         user_names = []\n                                         for user_id in field_value:\n                                             if isinstance(user_id, str): # Ensure it's a string ID\n                                                 try:\n                                                     # Get the user entity to display their name (title)\n                                                     # NOTE: seal.get_entity(entity_id=user_id) seems to be failing with a 500 error\n                                                     # for user entities, preventing retrieval of the user's title.\n                                                     # The script will fall back to displaying the user ID.\n                                                     # This might be a temporary issue or a limitation in the API for user entities.\n                                                     user_entity = seal.get_entity(entity_id=user_id)\n                                                     user_names.append(user_entity.get('title', user_id)) # Attempt to get title, fallback to ID on error\n                                                 except Exception as e:\n                                                     # print(f\"Error retrieving user entity {user_id}: {e}\") # Keep logs clean unless debugging\n                                                     user_names.append(user_id) # Fallback to ID on error\n                                     value_str = \", \".join(user_names)\n                                 elif field_dataType == 'ENTITY': # --- Handle REFERENCE fields (list of entity refs) ---\n                                     referenced_titles = []\n                                     for item_ref in field_value:\n                                         if isinstance(item_ref, dict) and item_ref.get('id'):\n                                             try:\n                                                 # Get the referenced entity to display its title\n                                                 referenced_entity = seal.get_entity(ref=item_ref)\n                                                 referenced_titles.append(referenced_entity.get('title', item_ref.get('id', 'Untitled')))\n                                             except Exception as e:\n                                                 print(f\"Error retrieving referenced entity {item_ref.get('id')}: {e}\")\n                                                 referenced_titles.append(item_ref.get('id', 'Error')) # Fallback to ID on error\n                                             elif isinstance(item_ref, str): # Handle potential list of IDs directly (less common for REFERENCE but kept for robustness)\n                                                 try:\n                                                    referenced_entity = seal.get_entity(entity_id=item_ref)\n                                                    referenced_titles.append(referenced_entity.get('title', item_ref))\n                                                 except Exception as e:\n                                                    print(f\"Error retrieving referenced entity {item_ref}: {e}\")\n                                                    referenced_titles.append(item_ref) # Fallback to ID on error\n                                     value_str = \", \".join(referenced_titles)\n                                 else: # --- Handle other list types ---\n                                     value_str = \", \".join(map(str, field_value))\n                             # --- Corrected Indentation ---\n                             elif isinstance(field_value, dict):\n                                  # Handle dict values (like rich text) if needed, for now just stringify\n                                  value_str = str(field_value)\n                             elif field_dataType in ('DATE', 'DATETIME'): # --- Handle Date and Datetime fields ---\n                                 if field_value is not None:\n                                     try:\n                                         # Parse the ISO string and format it\n                                         date_obj = isoparse(field_value)\n                                         if field_dataType == 'DATE':\n                                              value_str = date_obj.strftime('%Y-%m-%d') # Example format: 2025-07-04\n                                         else: # DATETIME\n                                              value_str = date_obj.strftime('%Y-%m-%d %H:%M:%S UTC') # Example format: 2025-07-04 16:05:26 UTC\n                                     except Exception as e:\n                                         print(f\"Error parsing date/datetime for field '{field_name}': {e}\")\n                                         value_str = f\"Invalid Date: {field_value}\" # Show original value if parsing fails\n                                 else:\n                                     value_str = 'N/A'\n                             else:\n                                 # --- Handle other single values (string, number, boolean) ---\n                                 value_str = str(field_value) if field_value is not None else 'N/A'\n\n                             # This story.append should be at the same level as the if/elif/else chain above\n                             story.append(Paragraph(f\"<i>{field_name}:</i> {value_str}\", styles['Normal']))\n                        else:\n                             story.append(Paragraph(\"No fields found.\", styles['Normal']))\n\n                    story.append(Spacer(1, 18)) # Add space between entities\n\n                doc.build(story)\n                pdf_generated_successfully = True\n                print(f\"PDF generated and saved to {generated_pdf_path}\")\n\n            except Exception as e:\n                print(f\"Error during PDF generation: {e}\")\n                pdf_generated_successfully = False\n\n        else:\n            print(\"No entities retrieved to generate PDF from.\")\n\n        # --- File Upload and Linking Step ---\n        # Check if a PDF file was successfully generated\n        if pdf_generated_successfully and os.path.exists(generated_pdf_path):\n            print(\"\\n--- File Upload and Linking Step ---\") # Added newline for clarity\n            temp_upload_filename = None # Define outside try block for finally\n            try:\n                # Get the current value of the 'Audit Report Generated' field\n                existing_report_refs = containing_entity[\"fields\"].get(AUDIT_REPORT_FIELD_NAME, {}).get(\"value\", []) or []\n                existing_report_file_id = None\n                if existing_report_refs and isinstance(existing_report_refs, list) and len(existing_report_refs) > 0:\n                    existing_report_file_id = existing_report_refs[0].get(\"id\")\n                    print(f\"Found existing report file reference: {existing_report_file_id}\")\n\n                if existing_report_file_id:\n                    # --- Update Existing File Entity ---\n                    print(f\"Attempting to update existing file entity content for: {existing_report_file_id}\")\n\n                    # 1. Get the existing file entity to check its status\n                    existing_file_entity = seal.get_entity(entity_id=existing_report_file_id)\n\n                    # 2. Make it editable if necessary\n                    if existing_file_entity[\"status\"] != \"EDITABLE\":\n                         print(f\"Making existing file entity editable: {existing_report_file_id}\")\n                         seal.make_entity_editable(existing_report_file_id)\n                         # Need to get the editable version after making it editable for subsequent updates\n                         existing_file_entity = seal.get_entity(entity_id=existing_report_file_id)\n\n\n                    # 3. Upload the new PDF content as a *temporary* file entity\n                    # This creates a new entity whose fileId we will use\n                    print(\"Uploading new PDF content as a temporary file...\")\n                    # seal.upload_file requires a path, not file content directly\n                    # Use a unique temporary filename to avoid potential conflicts\n                    timestamp = str(int(time.time()))\n                    temp_upload_filename = f\"temp_upload_{timestamp}_{generated_file_name}\"\n                    # Rename the generated file to the temporary upload name\n                    os.rename(generated_pdf_path, temp_upload_filename)\n\n                    temp_uploaded_entity = seal.upload_file(\n                        file_path=temp_upload_filename,\n                        file_name=f\"temp_{generated_file_name}\", # Give it a temp name in Seal\n                        type_title=PDF_FILE_TYPE_NAME, # Must be a file type\n                        extract_fields_with_ai=False\n                    )\n                    print(f\"Uploaded temporary file entity: {temp_uploaded_entity['id']}\")\n\n                    # 4. Get the fileId from the temporary entity's content\n                    new_file_id = temp_uploaded_entity.get(\"content\", {}).get(\"value\", {}).get(\"fileId\")\n                    if not new_file_id:\n                         raise Exception(\"Could not get fileId from temporary uploaded entity.\")\n                    print(f\"Extracted new fileId from temporary entity: {new_file_id}\")\n\n                    # 5. Update the *existing* report file entity's content field to point to the new fileId\n                    print(f\"Patching content of existing report file entity: {existing_report_file_id}\")\n                    new_content_payload = {\n                        \"content\": {\n                            \"type\": \"FILE\", # The content type of the target entity must be FILE\n                            \"value\": {\n                                \"fileId\": new_file_id\n                            }\n                        }\n                    }\n                    # Use _request to patch the content field directly via the API\n                    seal._request(\n                        url=f\"entities/{existing_report_file_id}/content\",\n                        method=\"PATCH\",\n                        json=new_content_payload,\n                    )\n                    print(\"Successfully patched content of existing report file entity.\")\n\n                    # 6. Update the title of the existing report file entity\n                    # The title might have changed if the Audit Master Document title changed\n                    current_title = existing_file_entity.get(\"title\")\n                    if current_title != generated_file_title:\n                        seal.update_entity_title(existing_report_file_id, generated_file_title)\n                        print(f\"Updated existing file entity title to: {generated_file_title}\")\n                    else:\n                        print(\"Existing file entity title is already correct.\")\n\n                    # 7. Archive the temporary file entity\n                    print(f\"Archiving temporary file entity: {temp_uploaded_entity['id']}\")\n                    seal.archive_entity(temp_uploaded_entity[\"id\"], True)\n                    print(\"Temporary file entity archived.\")\n\n                    # The reference in the containing entity should already point to the existing file ID\n                    # Ensure it points to the latest version (version=None)\n                    final_report_ref = {\"id\": existing_report_file_id, \"version\": None}\n                    updated_report_refs = [final_report_ref] # Assuming single value field\n                    current_report_refs = containing_entity[\"fields\"].get(AUDIT_REPORT_FIELD_NAME, {}).get(\"value\", []) or []\n\n                    # Only update the reference field if it's not already pointing correctly\n                    if current_report_refs != updated_report_refs:\n                         seal.update_field_value(AUDIT_REPORT_FIELD_NAME, updated_report_refs)\n                         print(f\"Updated '{AUDIT_REPORT_FIELD_NAME}' field with reference to updated PDF.\")\n                    else:\n                         print(f\"'{AUDIT_REPORT_FIELD_NAME}' field already correctly references the updated PDF.\")\n\n\n                else:\n                    # --- Create New File Entity ---\n                    print(\"No existing report file found. Creating a new one.\")\n                    uploaded_file_entity = seal.upload_file(\n                        file_path=generated_pdf_path,\n                        file_name=generated_file_name, # Use the generated filename\n                        type_title=PDF_FILE_TYPE_NAME,\n                        extract_fields_with_ai=False # Set to True if you want AI field extraction\n                    )\n                    print(f\"Successfully uploaded PDF as new entity: {uploaded_file_entity['id']}\")\n\n                    # Update the title of the newly created file entity\n                    seal.update_entity_title(uploaded_file_entity['id'], generated_file_title)\n                    print(f\"Updated uploaded file entity title to: {generated_file_title}\")\n\n\n                    # Ensure the containing entity's reference field points to this file\n                    new_report_ref = {\"id\": uploaded_file_entity[\"id\"], \"version\": None} # Or version=\"1\" if required\n                    updated_report_refs = [new_report_ref] # Assuming single-value field\n\n                    # Update the 'Audit Report Generated' field in the containing entity\n                    seal.update_field_value(AUDIT_REPORT_FIELD_NAME, updated_report_refs)\n                    print(f\"Updated '{AUDIT_REPORT_FIELD_NAME}' field with reference to new PDF.\")\n\n\n            except Exception as e:\n                print(f\"Error during file upload, replace, or field update: {e}\")\n                # Re-raise the exception to make the script fail explicitly\n                raise e # Re-raise the exception\n            finally:\n                # Clean up the temporary file (using the renamed path if it was renamed)\n                # Check if temp_upload_filename was defined before trying to clean it\n                temp_cleanup_path = temp_upload_filename if 'temp_upload_filename' in locals() else generated_pdf_path\n                if os.path.exists(temp_cleanup_path):\n                    os.remove(temp_cleanup_path)\n                    print(f\"Cleaned up temporary file: {temp_cleanup_path}\")\n\n        else:\n            print(\"PDF generation failed or file not found, skipping file upload and linking.\")\n            # Optionally, clear the reference field if generation failed?\n            # seal.update_field_value(AUDIT_REPORT_FIELD_NAME, [])\n            # print(f\"Cleared '{AUDIT_REPORT_FIELD_NAME}' field due to generation failure.\")\n\n\n    else:\n        print(f\"'{SELECT_ENTITIES_FIELD_NAME}' field is not a Reference type or is empty.\")\nelse:\n    print(f\"'{SELECT_ENTITIES_FIELD_NAME}' field not found in the containing entity.\")"
    }
  }
}
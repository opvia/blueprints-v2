{
  "schemaVersion": "2.0.0",
  "id": "6ea7b8b0-0668-4544-a4fb-50837ef998e2",
  "title": "Diverge Panel Subparts from Preparation template",
  "status": "EDITABLE",
  "version": null,
  "previousVersion": null,
  "metadata": {
    "index": "0",
    "createdAt": "1970-01-01T00:00:00.000Z",
    "lastUpdatedAt": "1970-01-01T00:00:00.000Z",
    "createdByRoleId": "44444444-4444-4444-8888-444444444444",
    "lastUpdatedByRoleId": "44444444-4444-4444-8888-444444444444",
    "editors": [],
    "typeIndex": "0"
  },
  "sourceInfo": {
    "template": {
      "id": "4a3102b9-7295-4dfd-b36a-3e66e5f951db",
      "version": "2"
    }
  },
  "fields": {},
  "kind": "INSTANCE",
  "type": {
    "ref": {
      "id": "4eb6726b-c745-4cd0-bf1b-ef63ad35840b"
    }
  },
  "content": {
    "type": "SCRIPT_CODE",
    "value": {
      "scriptCode": "# Template ID for the new Mastermix Individual Instance\nMASTERMIX_INDIVIDUAL_INSTANCE_TEMPLATE_ID = \"ed12f60e-a06b-4c15-8339-d79ee13f178a\"\n\ndef run_script():\n    containing_entity = seal.get_containing_entity()\n    containing_entity_id = containing_entity[\"id\"]\n    containing_entity_fields = containing_entity[\"fields\"]\n\n    # Ensure the containing entity is editable to update its reference fields later.\n    if containing_entity[\"status\"] != \"EDITABLE\":\n        print(f\"Making containing entity {containing_entity_id} editable...\")\n        seal.make_entity_editable(containing_entity_id)\n        # Re-fetch the entity after making it editable to ensure we have the latest draft data\n        containing_entity = seal.get_containing_entity()\n        containing_entity_fields = containing_entity[\"fields\"]\n\n    # Get the @CREATED_FROM entity for adding new subpart instances\n    created_from_ref = containing_entity.get(\"sourceInfo\", {}).get(\"createdFrom\")\n    if not created_from_ref:\n        print(\"Warning: Containing entity does not have a 'createdFrom' reference. Cannot add new subpart instances to parent.\")\n        parent_entity_id = None\n    else:\n        parent_entity_id = created_from_ref[\"id\"]\n        print(f\"Parent entity (createdFrom) ID: {parent_entity_id}\")\n        # Make the parent entity editable if necessary\n        parent_entity = seal.get_entity(parent_entity_id)\n        if parent_entity[\"status\"] != \"EDITABLE\":\n            print(f\"Making parent entity {parent_entity_id} editable...\")\n            seal.make_entity_editable(parent_entity_id)\n\n    newly_created_entity_ids = []\n    created_subpart_instance_refs = [] # To collect references for the parent entity's \"MM individual instances\" field\n\n    # --- Process for Subpart 1 Preparation ---\n    if containing_entity_fields[\"Subpart 1\"][\"value\"]: # Check if Subpart 1 is referenced\n        subpart_1_prep_ref_field_name = \"Subpart 1 preparation\"\n        current_subpart_1_prep_ref = containing_entity_fields.get(subpart_1_prep_ref_field_name, {}).get(\"value\")\n\n        # Define fields to map from containing entity to the new Subpart 1 instance\n        subpart_1_mapped_fields = {\n            \"Operator ID\": containing_entity_fields[\"Operator ID\"][\"value\"],\n            \"Date\": containing_entity_fields[\"Date\"][\"value\"],\n            \"Subpart\": containing_entity_fields[\"Subpart 1\"][\"value\"],\n            \"Daily subpart MM Number\": containing_entity_fields[\"Daily subpart 1 MM number\"][\"value\"],\n            \"No of Samples\": containing_entity_fields[\"1. No of samples\"][\"value\"],\n            \"No of Samples (inc. excess)\": containing_entity_fields[\"1. No of samples (inc. excess)\"][\"value\"],\n            \"Total MM Volume\": containing_entity_fields[\"1. Total MM Volume (uL)\"][\"value\"],\n            \"QC Result\": containing_entity_fields[\"1. QC Result\"][\"value\"],\n            \"Reagents\": containing_entity_fields[\"1. Reagents\"][\"value\"] # This transfers submission refs to a reference field\n        }\n\n        if current_subpart_1_prep_ref:\n            existing_subpart_1_prep_id = current_subpart_1_prep_ref[0]['id']\n            print(f\"Subpart 1 preparation already linked: {existing_subpart_1_prep_id}. Updating existing instance.\")\n\n            seal.make_entity_editable(existing_subpart_1_prep_id)\n\n            for field_name, field_value in subpart_1_mapped_fields.items():\n                print(f\"Updating field '{field_name}' in existing Subpart 1 preparation instance {existing_subpart_1_prep_id}.\")\n                seal.update_field_value_in_entity(\n                    entity_id=existing_subpart_1_prep_id,\n                    field_name=field_name,\n                    field_value=field_value\n                )\n            created_subpart_instance_refs.append({\"id\": existing_subpart_1_prep_id, \"version\": None})\n\n        else:\n            print(f\"Creating new instance from template {MASTERMIX_INDIVIDUAL_INSTANCE_TEMPLATE_ID} for Subpart 1 preparation...\")\n            new_subpart_1_prep_entity = seal.create_instance_from_template(\n                template_id=MASTERMIX_INDIVIDUAL_INSTANCE_TEMPLATE_ID,\n                field_values=subpart_1_mapped_fields\n            )\n            new_subpart_1_prep_id = new_subpart_1_prep_entity[\"id\"]\n            newly_created_entity_ids.append(new_subpart_1_prep_id)\n            print(f\"New Subpart 1 preparation instance created with ID: {new_subpart_1_prep_id}\")\n\n            print(f\"Updating containing entity's '{subpart_1_prep_ref_field_name}' field to reference {new_subpart_1_prep_id}.\")\n            seal.update_field_value(\n                field_name=subpart_1_prep_ref_field_name,\n                field_value=[{\"id\": new_subpart_1_prep_id, \"version\": None}]\n            )\n            created_subpart_instance_refs.append({\"id\": new_subpart_1_prep_id, \"version\": None})\n    else:\n        print(\"No Subpart 1 reference found. Skipping Subpart 1 preparation.\")\n\n\n    # --- Process for Subpart 2 Preparation ---\n    if containing_entity_fields[\"Subpart 2\"][\"value\"]: # Check if Subpart 2 is referenced\n        subpart_2_prep_ref_field_name = \"Subpart 2 preparation\"\n        current_subpart_2_prep_ref = containing_entity_fields.get(subpart_2_prep_ref_field_name, {}).get(\"value\")\n\n        # Define fields to map from containing entity to the new Subpart 2 instance\n        subpart_2_mapped_fields = {\n            \"Operator ID\": containing_entity_fields[\"Operator ID\"][\"value\"],\n            \"Date\": containing_entity_fields[\"Date\"][\"value\"],\n            \"Subpart\": containing_entity_fields[\"Subpart 2\"][\"value\"],\n            \"Daily subpart MM Number\": containing_entity_fields[\"Daily subpart 2 MM number\"][\"value\"],\n            \"No of Samples\": containing_entity_fields[\"2. No. of samples\"][\"value\"], # Corrected field name\n            \"No of Samples (inc. excess)\": containing_entity_fields[\"2. No of samples (inc. excess)\"][\"value\"],\n            \"Total MM Volume\": containing_entity_fields[\"2. Total MM Volume (uL)\"][\"value\"],\n            \"QC Result\": containing_entity_fields[\"2. QC Result\"][\"value\"],\n            \"Reagents\": containing_entity_fields[\"2. Reagents\"][\"value\"]\n        }\n\n        if current_subpart_2_prep_ref:\n            existing_subpart_2_prep_id = current_subpart_2_prep_ref[0]['id']\n            print(f\"Subpart 2 preparation already linked: {existing_subpart_2_prep_id}. Updating existing instance.\")\n\n            seal.make_entity_editable(existing_subpart_2_prep_id)\n\n            for field_name, field_value in subpart_2_mapped_fields.items():\n                print(f\"Updating field '{field_name}' in existing Subpart 2 preparation instance {existing_subpart_2_prep_id}.\")\n                seal.update_field_value_in_entity(\n                    entity_id=existing_subpart_2_prep_id,\n                    field_name=field_name,\n                    field_value=field_value\n                )\n            created_subpart_instance_refs.append({\"id\": existing_subpart_2_prep_id, \"version\": None})\n\n        else:\n            print(f\"Creating new instance from template {MASTERMIX_INDIVIDUAL_INSTANCE_TEMPLATE_ID} for Subpart 2 preparation...\")\n            new_subpart_2_prep_entity = seal.create_instance_from_template(\n                template_id=MASTERMIX_INDIVIDUAL_INSTANCE_TEMPLATE_ID,\n                field_values=subpart_2_mapped_fields\n            )\n            new_subpart_2_prep_id = new_subpart_2_prep_entity[\"id\"]\n            newly_created_entity_ids.append(new_subpart_2_prep_id)\n            print(f\"New Subpart 2 preparation instance created with ID: {new_subpart_2_prep_id}\")\n\n            print(f\"Updating containing entity's '{subpart_2_prep_ref_field_name}' field to reference {new_subpart_2_prep_id}.\")\n            seal.update_field_value(\n                field_name=subpart_2_prep_ref_field_name,\n                field_value=[{\"id\": new_subpart_2_prep_id, \"version\": None}]\n            )\n            created_subpart_instance_refs.append({\"id\": new_subpart_2_prep_id, \"version\": None})\n    else:\n        print(\"No Subpart 2 reference found. Skipping Subpart 2 preparation.\")\n\n    # --- Update the @CREATED_FROM entity with references to the new subpart instances ---\n    if parent_entity_id and created_subpart_instance_refs:\n        print(f\"Updating 'MM individual instances' in parent entity {parent_entity_id} with new subpart references.\")\n        # Re-fetch parent entity to ensure we're working with the latest editable version\n        parent_entity = seal.get_entity(parent_entity_id)\n        current_mm_individual_instances = parent_entity.get(\"fields\", {}).get(\"MM individual instances\", {}).get(\"value\", []) or []\n\n        # Filter out any existing references to these subparts to avoid duplicates, then add new ones\n        updated_mm_individual_instances = [\n            ref for ref in current_mm_individual_instances\n            if ref[\"id\"] not in {s_ref[\"id\"] for s_ref in created_subpart_instance_refs}\n        ] + created_subpart_instance_refs\n\n        seal.update_field_value_in_entity(\n            entity_id=parent_entity_id,\n            field_name=\"MM individual instances\",\n            field_value=updated_mm_individual_instances\n        )\n        print(\"Successfully updated parent entity's 'MM individual instances' field.\")\n    elif not parent_entity_id:\n        print(\"Skipping update of parent entity's 'MM individual instances' field as no parent was found.\")\n    else:\n        print(\"No new subpart instances created to add to parent entity's 'MM individual instances' field.\")\n\n\n    print(\"Script finished successfully.\")\n\nrun_script()"
    }
  }
}
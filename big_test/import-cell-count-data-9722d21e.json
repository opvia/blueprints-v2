{
  "schemaVersion": "2.0.0",
  "id": "9722d21e-1495-4325-9c6c-368b21bf2aa9",
  "title": "Import Cell Count Data",
  "status": "EDITABLE",
  "version": null,
  "previousVersion": null,
  "metadata": {
    "index": "0",
    "createdAt": "1970-01-01T00:00:00.000Z",
    "lastUpdatedAt": "1970-01-01T00:00:00.000Z",
    "createdByRoleId": "44444444-4444-4444-8888-444444444444",
    "lastUpdatedByRoleId": "44444444-4444-4444-8888-444444444444",
    "editors": [],
    "typeIndex": "0"
  },
  "sourceInfo": {
    "template": {
      "id": "4a3102b9-7295-4dfd-b36a-3e66e5f951db",
      "version": "2"
    }
  },
  "fields": {},
  "kind": "INSTANCE",
  "type": {
    "ref": {
      "id": "4eb6726b-c745-4cd0-bf1b-ef63ad35840b"
    }
  },
  "content": {
    "type": "SCRIPT_CODE",
    "value": {
      "scriptCode": "import pandas as pd\nimport os\nimport numpy as np\n\n# Define field names as constants for clarity\nREFERENCE_FIELD_NAME = \"Reference\"\nSUBMISSION_FIELD_NAME = \"Submission\"\nSAMPLE_ORDER_FIELD_NAME = \"Sample Order\"\nSAMPLE_ID_TARGET_FIELD = \"Sample ID\" # Target field name in the 'Submission' table\nEXPECTED_PANELS_TARGET_FIELD = \"Expected panels to stain\" # Source field for IMU Panels\nPANELS_TO_STAIN_TARGET_FIELD = \"Panels to stain\" # Target field for IMU Panels\nUSED_IN_FINAL_EXPERIMENT_FIELD_NAME = \"Used in Final Experiment?\" # Checkbox field to manage\n\n# Define the mapping from source CSV column names to target Seal submission field names\nSOURCE_TO_TARGET_MAPPING = {\n    \"Image\": \"Image ID\",\n    \"Operator\": \"Operator\",\n    \"Viability (%)\": \"Viability (%)\",\n    \"Live (cells/ml)\": \"Live Cells (cells/ml)\",\n    \"Dead (cells/ml)\": \"Dead Cells (cells/ml)\"\n}\n\n# Get the containing entity (the Worksheet instance)\ncontaining_entity = seal.get_containing_entity()\n\n# Get the value of the 'Reference' field where the CSV file is attached\nreference_field_value = containing_entity[\"fields\"].get(REFERENCE_FIELD_NAME, {}).get(\"value\")\n\nif not reference_field_value:\n    print(f\"No file referenced in the '{REFERENCE_FIELD_NAME}' field.\")\nelse:\n    file_ref = reference_field_value[0] # Assuming only one file is referenced\n    file_entity_id = file_ref[\"id\"]\n    file_version = file_ref.get(\"version\")\n\n    print(f\"Downloading file with ID: {file_entity_id}, Version: {file_version if file_version else 'latest'}\")\n\n    temp_file_path = seal.download_file(file_entity_id=file_entity_id, version=file_version)\n\n    try:\n        # Read the CSV file into a pandas DataFrame, using semicolon as delimiter\n        df = pd.read_csv(temp_file_path, sep=';')\n        print(f\"Successfully read file into DataFrame with {len(df)} rows and columns: {df.columns.tolist()}\")\n\n        # Validate that all required source columns exist in the DataFrame\n        for source_col in SOURCE_TO_TARGET_MAPPING.keys():\n            # Handle potential trailing whitespace in CSV column names\n            if source_col not in df.columns:\n                # Try to find a column that matches after stripping whitespace\n                matching_cols = [col for col in df.columns if col.strip() == source_col.strip()]\n                if matching_cols:\n                    df.rename(columns={matching_cols[0]: source_col}, inplace=True)\n                else:\n                    raise ValueError(f\"Required column '{source_col}' not found in the uploaded file. Available columns: {df.columns.tolist()}\")\n\n        # Filter out rows with NaN in critical numeric columns\n        initial_row_count = len(df)\n        df_filtered = df.dropna(subset=[\"Live (cells/ml)\", \"Dead (cells/ml)\"])\n        if len(df_filtered) < initial_row_count:\n            print(f\"Removed {initial_row_count - len(df_filtered)} rows with missing cell count data.\")\n        df = df_filtered\n\n        # Ensure 'Image' column is treated as string for suffix extraction later, then replace NaN with None\n        df['Image'] = df['Image'].astype(str)\n        df = df.replace({np.nan: None})\n\n        # --- Get Sample Order entity and build lookup map for Sample IDs and IMU Panels ---\n        # This lookup will map the suffix (order number) to the full Sample entity reference\n        sample_order_lookup = {}\n        sample_order_ref_value = containing_entity[\"fields\"].get(SAMPLE_ORDER_FIELD_NAME, {}).get(\"value\")\n\n        if sample_order_ref_value:\n            sample_order_entity_ref = sample_order_ref_value[0] # Assuming single reference\n            sample_order_entity = seal.get_entity(ref=sample_order_entity_ref)\n            print(f\"Fetched Sample Order entity: {sample_order_entity.get('title')}\")\n\n            # Iterate through Plate 1 to Plate 5 submission tables in the Sample Order entity\n            for i in range(1, 6):\n                plate_field_name = f\"Plate {i}\"\n                plate_submission_field = sample_order_entity[\"fields\"].get(plate_field_name)\n\n                if plate_submission_field and plate_submission_field.get(\"value\"):\n                    plate_refs = plate_submission_field[\"value\"]\n                    print(f\"Processing {len(plate_refs)} rows from {plate_field_name} in Sample Order.\")\n                    for plate_row_ref in plate_refs:\n                        plate_row_entity = seal.get_entity(ref=plate_row_ref)\n                        order_number = plate_row_entity[\"fields\"].get(\"Order number\", {}).get(\"value\")\n                        # Assuming \"Sample\" field in Plate X is a REFERENCE field, its value is a list of refs\n                        sample_entity_refs = plate_row_entity[\"fields\"].get(\"Sample\", {}).get(\"value\")\n\n                        if order_number is not None and sample_entity_refs and isinstance(sample_entity_refs, list) and len(sample_entity_refs) > 0:\n                            # Store the first sample entity reference for this order number\n                            sample_order_lookup[str(order_number)] = sample_entity_refs[0]\n                        else:\n                            print(f\"Warning: Missing 'Order number' or valid 'Sample' reference in a row of {plate_field_name} (ID: {plate_row_ref['id']}). Skipping.\")\n                else:\n                    print(f\"No data found in {plate_field_name} for Sample Order entity (ID: {sample_order_entity['id']}).\")\n        else:\n            print(f\"No entity referenced in the '{SAMPLE_ORDER_FIELD_NAME}' field. Cannot populate '{SAMPLE_ID_TARGET_FIELD}' or '{EXPECTED_PANELS_TARGET_FIELD}'.\")\n\n        # --- Prepare data for submission and populate Sample ID and Expected panels to stain ---\n        submission_records = []\n        for index, row in df.iterrows():\n            record = {}\n            # Map CSV columns to target fields in the submission table\n            for source_col, target_field in SOURCE_TO_TARGET_MAPPING.items():\n                record[target_field] = row[source_col]\n\n            # Determine and add Sample ID and Expected panels to stain based on Image ID suffix and Sample Order lookup\n            image_id_string = str(record.get(\"Image ID\", \"\"))\n            suffix = None\n            if '-' in image_id_string:\n                suffix = image_id_string.split('-')[-1]\n\n            sample_entity_ref = None\n            if suffix and suffix in sample_order_lookup:\n                sample_entity_ref = sample_order_lookup[suffix]\n                # Populate Sample ID in the main submission table. Reference fields expect a list of refs.\n                record[SAMPLE_ID_TARGET_FIELD] = [sample_entity_ref]\n                print(f\"Mapped Image ID '{image_id_string}' (suffix '{suffix}') to Sample entity ref: {sample_entity_ref['id']}\")\n\n                # Fetch the Sample entity to get IMU Panel(s)\n                sample_entity = seal.get_entity(ref=sample_entity_ref)\n                # Assuming \"IMU Panel(s)\" in Sample entity is a REFERENCE field (value is a list of refs)\n                imu_panels_value = sample_entity[\"fields\"].get(\"IMU Panel(s)\", {}).get(\"value\", [])\n                record[EXPECTED_PANELS_TARGET_FIELD] = imu_panels_value\n                # Populate 'Panels to stain' field with the same value\n                record[PANELS_TO_STAIN_TARGET_FIELD] = imu_panels_value\n                print(f\"Fetched {len(imu_panels_value)} IMU Panel(s) for Sample '{sample_entity_ref['id']}'.\")\n            else:\n                record[SAMPLE_ID_TARGET_FIELD] = [] # Reference field expects an empty list if no value\n                record[EXPECTED_PANELS_TARGET_FIELD] = []\n                record[PANELS_TO_STAIN_TARGET_FIELD] = [] # Also set Panels to stain to empty\n                if suffix:\n                    print(f\"Warning: Suffix '{suffix}' from Image ID '{image_id_string}' not found in Sample Order lookup. '{SAMPLE_ID_TARGET_FIELD}', '{EXPECTED_PANELS_TARGET_FIELD}', and '{PANELS_TO_STAIN_TARGET_FIELD}' set to empty lists.\")\n                else:\n                    print(f\"Warning: Could not extract suffix from Image ID '{image_id_string}'. '{SAMPLE_ID_TARGET_FIELD}', '{EXPECTED_PANELS_TARGET_FIELD}', and '{PANELS_TO_STAIN_TARGET_FIELD}' set to empty lists.\")\n\n            submission_records.append(record)\n\n        # --- Logic for unchecking 'Used in Final Experiment?' for non-unique Sample IDs ---\n        sample_id_counts = {}\n        for record in submission_records:\n            sample_id_list = record.get(SAMPLE_ID_TARGET_FIELD)\n            if sample_id_list and isinstance(sample_id_list, list) and len(sample_id_list) > 0:\n                sample_id_ref = sample_id_list[0]\n                if isinstance(sample_id_ref, dict) and 'id' in sample_id_ref:\n                    sample_id_key = sample_id_ref['id']\n                    sample_id_counts[sample_id_key] = sample_id_counts.get(sample_id_key, 0) + 1\n\n        non_unique_sample_ids = {sample_id for sample_id, count in sample_id_counts.items() if count > 1}\n\n        for record in submission_records:\n            # Default to checked (as per template behavior)\n            record[USED_IN_FINAL_EXPERIMENT_FIELD_NAME] = True \n\n            sample_id_list = record.get(SAMPLE_ID_TARGET_FIELD)\n            if sample_id_list and isinstance(sample_id_list, list) and len(sample_id_list) > 0:\n                sample_id_ref = sample_id_list[0]\n                if isinstance(sample_id_ref, dict) and 'id' in sample_id_ref:\n                    if sample_id_ref['id'] in non_unique_sample_ids:\n                        print(f\"Sample ID '{sample_id_ref['id']}' is not unique. Unchecking '{USED_IN_FINAL_EXPERIMENT_FIELD_NAME}'.\")\n                        record[USED_IN_FINAL_EXPERIMENT_FIELD_NAME] = False\n\n        submission_df_to_send = pd.DataFrame(submission_records)\n\n        # Get the template reference for the 'Submission' field\n        submission_field_config = containing_entity[\"fields\"][SUBMISSION_FIELD_NAME][\"config\"]\n\n        if \"typeOrTemplateRef\" not in submission_field_config or \"id\" not in submission_field_config[\"typeOrTemplateRef\"]:\n            raise ValueError(f\"'{SUBMISSION_FIELD_NAME}' field config is missing 'typeOrTemplateRef' or its 'id'.\")\n\n        submission_template_ref_id = submission_field_config[\"typeOrTemplateRef\"][\"id\"]\n\n        # Get the active version of the template for the submission field to form the template_ref\n        submission_template_active_version_entity = seal.get_entity_active_version(submission_template_ref_id)\n        submission_template_ref = {\n            \"id\": submission_template_active_version_entity[\"id\"],\n            \"version\": submission_template_active_version_entity[\"version\"]\n        }\n\n        print(f\"Submitting {len(submission_records)} instances to '{SUBMISSION_FIELD_NAME}' field.\")\n        print(\"Submission DataFrame head:\\n\", submission_df_to_send.head())\n\n        # Submit the data to the submission field\n        seal.submit_to_instance_submission_field(\n            field_name=SUBMISSION_FIELD_NAME,\n            field_values_df=submission_df_to_send,\n            template_ref=submission_template_ref\n        )\n        print(\"Data successfully imported into the submission field.\")\n\n    finally:\n        # Clean up the downloaded temporary file\n        if os.path.exists(temp_file_path):\n            os.remove(temp_file_path)\n            print(f\"Cleaned up temporary file: {temp_file_path}\")"
    }
  }
}
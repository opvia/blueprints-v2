{
  "schemaVersion": "2.0.0",
  "id": "c4e3ff57-1fe9-4170-8fb0-3e7cc0bbe436",
  "title": "Pull antibodies from subparts into preparation instance",
  "status": "EDITABLE",
  "version": null,
  "previousVersion": null,
  "metadata": {
    "index": "0",
    "createdAt": "1970-01-01T00:00:00.000Z",
    "lastUpdatedAt": "1970-01-01T00:00:00.000Z",
    "createdByRoleId": "44444444-4444-4444-8888-444444444444",
    "lastUpdatedByRoleId": "44444444-4444-4444-8888-444444444444",
    "editors": [],
    "typeIndex": "0"
  },
  "sourceInfo": {
    "template": {
      "id": "4a3102b9-7295-4dfd-b36a-3e66e5f951db",
      "version": "2"
    }
  },
  "fields": {},
  "kind": "INSTANCE",
  "type": {
    "ref": {
      "id": "4eb6726b-c745-4cd0-bf1b-ef63ad35840b"
    }
  },
  "content": {
    "type": "SCRIPT_CODE",
    "value": {
      "scriptCode": "import pandas as pd\n\n# Template IDs provided by the user\nANTIBODY_TEMPLATE_ID = \"c36842f2-b513-4a15-bcd4-2ef45e8066e9\"\nREAGENT_TEMPLATE_ID = \"c764850f-a6ed-4c91-a489-2a62e44d6040\"\n\n# New function provided by the user - moved to the top for proper definition order\ndef create_search_query(searchable_ref_id):\n    # This function is now directly used by get_antibodies_from_subpart_search\n    return {\n    \"searchType\": \"LIVE\",\n    \"filters\": {\n        \"and\": [\n        {\n            \"or\": [\n            {\n                \"operator\": \"in\",\n                \"filter\": \"fieldValue\",\n                \"value\": [\n                {\n                    \"name\": \"Used in Panel Subparts:\",\n                    \"operator\": \"=\",\n                    \"value\": f\"ref({searchable_ref_id})\"\n                }\n                ]\n            }\n            ]\n        },\n        {\n            \"or\": [\n            {\n                \"operator\": \"in\",\n                \"filter\": \"template\",\n                \"value\": [\n                \"65097f3f-acef-445e-9cda-1ec0b4e11a6f\"\n                ]\n            }\n            ]\n        }\n        ]\n    }\n    }\n\n# Helper function to safely get a field value from an entity\ndef get_field_value(entity, field_name, default=None):\n    if entity is None:\n        return default\n    field = entity.get(\"fields\", {}).get(field_name)\n    if field and \"value\" in field:\n        return field[\"value\"]\n    return default\n\n# Helper function to safely get the ID of the first reference in a field\ndef get_first_ref_id(entity, field_name):\n    if entity is None:\n        return None\n    value = get_field_value(entity, field_name)\n    if isinstance(value, list) and value and isinstance(value[0], dict) and \"id\" in value[0]:\n        return value[0][\"id\"]\n    return None\n\n# Fetches antibody entities using a predefined search query based on the subpart ID\ndef get_antibodies_from_subpart_search(subpart_entity, entity_cache):\n    if subpart_entity is None:\n        print(\"Info: 'subpart_entity' is None in get_antibodies_from_subpart_search. Returning empty list.\")\n        return []\n\n    subpart_entity_id = subpart_entity[\"id\"]\n    print(f\"DEBUG: Searching for antibodies related to subpart ID: {subpart_entity_id}\")\n\n    # Use the predefined search query function provided by the user\n    query_config = create_search_query(subpart_entity_id)\n\n    antibody_refs = []\n    \n    try:\n        fetched_antibody_entities = seal.search_entities(query_config=query_config)\n    except Exception as e:\n        print(f\"Error calling seal.search_entities for subpart {subpart_entity.get('title', subpart_entity['id'])}: {e}\")\n        return []\n\n    if not isinstance(fetched_antibody_entities, list):\n        print(f\"Warning: seal.search_entities returned non-list type: {type(fetched_antibody_entities)}. Returning empty list.\")\n        return []\n\n    for entity in fetched_antibody_entities:\n        entity_cache[entity[\"id\"]] = entity\n        antibody_refs.append({\"id\": entity[\"id\"], \"version\": None})\n    \n    print(f\"DEBUG: get_antibodies_from_subpart_search returning {len(antibody_refs)} refs for {subpart_entity.get('title', subpart_entity['id'])}\")\n    return antibody_refs\n\n# Function to get the prefix from the subpart title (e.g., \"Tv2\" from \"Tv2_S\")\ndef get_subpart_prefix_from_title(subpart_entity_title):\n    if subpart_entity_title is None:\n        return None\n    \n    normalized_subpart_title_upper = str(subpart_entity_title).upper().replace(\" \", \"\").replace(\"_\", \"\")\n\n    # Mapping from normalized (uppercase) prefixes to desired display casing\n    display_prefix_map = {\n        \"TV1\": \"Tv1\", \"AV1\": \"Av1\",\n        \"TV2\": \"Tv2\", \"AV2\": \"Av2\",\n        \"TV3\": \"Tv3\", \"AV3\": \"Av3\",\n        \"TV4\": \"Tv4\", \"AV4\": \"Av4\",\n        \"TV5\": \"Tv5\", \"AV5\": \"Av5\",\n        \"NK1V1\": \"NK1v1\", \"NK2V1\": \"NK2v1\",\n        \"NK1V2\": \"NK1v2\", \"NK2V2\": \"NK2v2\",\n        \"NK1V3\": \"NK1v3\", \"NK2V3\": \"NK2v3\",\n        \"GD1V1\": \"GD1v1\", \"GD2V1\": \"GD2v1\",\n        \"TICV1\": \"TICv1\",\n    }\n\n    for upper_prefix, display_prefix in display_prefix_map.items():\n        if normalized_subpart_title_upper.startswith(upper_prefix):\n            return display_prefix\n            \n    print(f\"Warning: No specific prefix mapping found for subpart title '{subpart_entity_title}' (normalized: '{normalized_subpart_title_upper}').\")\n    return None\n\n# Dynamically determines the volume field name on an antibody entity based on the subpart's title\ndef get_dynamic_volume_field_name(subpart_entity_title):\n    if subpart_entity_title is None:\n        return None\n    normalized_subpart_title = str(subpart_entity_title).upper().replace(\" \", \"\").replace(\"_\", \"\")\n\n    volume_field_mappings = {\n        \"TV1\": \"Tv1\", \"AV1\": \"Av1\",\n        \"TV2\": \"Tv2\", \"AV2\": \"Av2\",\n        \"TV3\": \"Tv3\", \"AV3\": \"Av3\",\n        \"TV4\": \"Tv4\", \"AV4\": \"Av4\",\n        \"TV5\": \"Tv5\", \"AV5\": \"Av5\",\n        \"NK1V1\": \"NK1v1\", \"NK2V1\": \"NK2v1\",\n        \"NK1V2\": \"NK1v2\", \"NK2V2\": \"NK2v2\",\n        \"NK1V3\": \"NK1v3\", \"NK2V3\": \"NK2v3\",\n        \"GD1V1\": \"GD1v1\", \"GD2V1\": \"GD2v1\",\n        \"TICV1\": \"TICv1\",\n    }\n\n    for prefix, field_name in volume_field_mappings.items():\n        if normalized_subpart_title.startswith(prefix):\n            return field_name\n    \n    print(f\"Warning: No specific volume field mapping found for subpart title '{subpart_entity_title}' (normalized: '{normalized_subpart_title}').\")\n    return None\n\n# Safely gets the volume value from an antibody entity using the dynamic volume field name\ndef get_volume_value(antibody_entity, subpart_entity_title):\n    if antibody_entity is None:\n        return 0\n    volume_field_name = get_dynamic_volume_field_name(subpart_entity_title)\n    if volume_field_name:\n        value = get_field_value(antibody_entity, volume_field_name)\n        return value if isinstance(value, (int, float)) else 0\n    return 0\n\n# Determines the column name in the submission table for volumes based on the subpart's title\ndef get_submission_volume_column_name(subpart_entity_title):\n    prefix = get_subpart_prefix_from_title(subpart_entity_title)\n    if prefix:\n        return f\"{prefix} - Volume per panel (uL)\"\n    print(f\"Warning: Could not determine submission volume column prefix for subpart title '{subpart_entity_title}'.\")\n    return None\n\n# Determines the column name for 'Amount to add to MM' based on the subpart's title\ndef get_submission_amount_column_name(subpart_entity_title):\n    prefix = get_subpart_prefix_from_title(subpart_entity_title)\n    if prefix:\n        return f\"{prefix} - Amount to add to MM (uL)\"\n    print(f\"Warning: Could not determine submission amount column prefix for subpart title '{subpart_entity_title}'.\")\n    return None\n\n# Fetches explicit reagent references from the subpart entity, including their volumes\ndef get_explicit_reagent_data(subpart_entity, reagent_field_names, entity_cache):\n    if subpart_entity is None:\n        print(\"Info: 'subpart_entity' is None in get_explicit_reagent_data. Returning empty list.\")\n        return []\n    \n    explicit_reagent_data = []\n    \n    reagent_1_vol = get_field_value(subpart_entity, \"Volume of reagent 1 per panel (uL)\", 0)\n    reagent_2_vol = get_field_value(subpart_entity, \"Volume of reagent 2 per panel (uL)\", 0)\n\n    for field_name in reagent_field_names:\n        ref_value = get_field_value(subpart_entity, field_name)\n        if ref_value and isinstance(ref_value, list) and ref_value and isinstance(ref_value[0], dict) and \"id\" in ref_value[0]:\n            ref_id = ref_value[0][\"id\"]\n            if ref_id not in entity_cache:\n                entity_cache[ref_id] = seal.get_entity(entity_id=ref_id)\n            \n            volume_to_add = 0\n            if field_name == \"Reagent 1\":\n                volume_to_add = reagent_1_vol\n            elif field_name == \"Reagent 2\":\n                volume_to_add = reagent_2_vol\n            \n            explicit_reagent_data.append({\n                \"ref\": ref_value[0],\n                \"source_field_name\": field_name, \n                \"volume\": volume_to_add\n            })\n    return explicit_reagent_data\n\n# Processes and submits data to a single mastermix submission table\ndef process_and_submit_table_data(\n    table_num,\n    containing_entity,\n    current_subpart_entity_title, # Title of the subpart whose data is being processed\n    submission_field_name_on_containing_entity,\n    explicit_reagent_data,\n    common_antibody_entities_ordered,\n    unique_antibody_entities_for_this_table,\n    reagent_template_id_version,\n    antibody_template_id_version\n):\n    containing_entity_id = containing_entity[\"id\"]\n    submission_volume_column_name = get_submission_volume_column_name(current_subpart_entity_title)\n    submission_amount_column_name = get_submission_amount_column_name(current_subpart_entity_title) # New: Get amount column name\n    \n    if not submission_volume_column_name:\n        seal.throw_error(f\"Error: Could not determine the submission table volume column name for subpart '{current_subpart_entity_title}'.\")\n    if not submission_amount_column_name: # New: Check if amount column name is determined\n        seal.throw_error(f\"Error: Could not determine the submission table amount column name for subpart '{current_subpart_entity_title}'.\")\n\n    print(f\"--- Processing '{submission_field_name_on_containing_entity}' for Subpart {table_num} (using volume column '{submission_volume_column_name}' and amount column '{submission_amount_column_name}') ---\")\n\n    reagents_submission_field = containing_entity[\"fields\"].get(submission_field_name_on_containing_entity)\n    if not reagents_submission_field:\n        seal.throw_error(f\"Error: '{submission_field_name_on_containing_entity}' submission field not found in the containing entity.\")\n\n    current_submission_rows = reagents_submission_field.get(\"value\") or [] \n    if len(current_submission_rows) > 0:\n        seal.throw_error(\n            f\"Error: The '{submission_field_name_on_containing_entity}' submission table currently has {len(current_submission_rows)} rows. \"\n            \"It must be empty to add new entries.\"\n        )\n\n    # New: Get the number of samples (inc. excess) from the containing entity\n    if table_num == 1:\n        no_of_samples_inc_excess = get_field_value(containing_entity, \"1. No of samples (inc. excess)\", 0)\n    elif table_num == 2:\n        no_of_samples_inc_excess = get_field_value(containing_entity, \"2. No of samples (inc. excess)\", 0)\n    else:\n        no_of_samples_inc_excess = 0\n    \n    if not isinstance(no_of_samples_inc_excess, (int, float)) or no_of_samples_inc_excess <= 0:\n        print(f\"Warning: 'No of samples (inc. excess)' for table {table_num} is invalid or zero ({no_of_samples_inc_excess}). Amount to add will be 0.\")\n        no_of_samples_inc_excess = 0 # Ensure it's a number for multiplication\n\n\n    reagent_rows_to_submit = []\n    antibody_rows_to_submit = []\n\n    # Prepare rows for explicit reagents (using REAGENT_TEMPLATE_ID)\n    for reagent_item in explicit_reagent_data:\n        row_data = {\"Reagent\": [reagent_item[\"ref\"]]} # Use 'Reagent' field as specified for REAGENT_TEMPLATE_ID\n        row_data[submission_volume_column_name] = reagent_item[\"volume\"] # Populate dynamic volume field for NUMBER type\n\n        # New: Calculate and populate 'Amount to add to MM (uL)'\n        amount_to_add = reagent_item[\"volume\"] * no_of_samples_inc_excess\n        row_data[submission_amount_column_name] = amount_to_add\n        \n        reagent_rows_to_submit.append(row_data)\n    print(f\"Prepared {len(reagent_rows_to_submit)} explicit reagent rows for '{submission_field_name_on_containing_entity}'.\")\n\n    # Add common antibodies (ordered as determined globally)\n    for antibody_entity in common_antibody_entities_ordered:\n        row_data = {\"Reagent\": [{\"id\": antibody_entity[\"id\"], \"version\": None}]} # Use 'Reagent' field for ANTIBODY_TEMPLATE_ID\n        # DO NOT populate dynamic volume field for FORMULA type\n        antibody_rows_to_submit.append(row_data)\n    print(f\"Prepared {len(common_antibody_entities_ordered)} common antibody rows for '{submission_field_name_on_containing_entity}'.\")\n\n    # Add unique antibodies for this table (already sorted)\n    for antibody_entity in unique_antibody_entities_for_this_table:\n        row_data = {\"Reagent\": [{\"id\": antibody_entity[\"id\"], \"version\": None}]} # Use 'Reagent' field for ANTIBODY_TEMPLATE_ID\n        # DO NOT populate dynamic volume field for FORMULA type\n        antibody_rows_to_submit.append(row_data)\n    print(f\"Prepared {len(unique_antibody_entities_for_this_table)} unique antibody rows for '{submission_field_name_on_containing_entity}'.\")\n\n    # Submit reagent rows first\n    if reagent_rows_to_submit:\n        seal.submit_to_instance_submission_field_in_entity(\n            entity_id=containing_entity_id,\n            field_name=submission_field_name_on_containing_entity,\n            field_values_df=pd.DataFrame(reagent_rows_to_submit),\n            template_ref={\"id\": REAGENT_TEMPLATE_ID, \"version\": reagent_template_id_version}\n        )\n        print(f\"Success: Added {len(reagent_rows_to_submit)} reagent entities to '{submission_field_name_on_containing_entity}' submission table.\")\n    else:\n        print(f\"Info: No reagent rows to submit to '{submission_field_name_on_containing_entity}'.\")\n\n    # Then submit antibody rows\n    if antibody_rows_to_submit:\n        seal.submit_to_instance_submission_field_in_entity(\n            entity_id=containing_entity_id,\n            field_name=submission_field_name_on_containing_entity,\n            field_values_df=pd.DataFrame(antibody_rows_to_submit),\n            template_ref={\"id\": ANTIBODY_TEMPLATE_ID, \"version\": antibody_template_id_version}\n        )\n        print(f\"Success: Added {len(antibody_rows_to_submit)} antibody entities to '{submission_field_name_on_containing_entity}' submission table.\")\n    else:\n        print(f\"Info: No antibody rows to submit to '{submission_field_name_on_containing_entity}'.\")\n\n    if not reagent_rows_to_submit and not antibody_rows_to_submit:\n        print(f\"Info: No new rows were submitted to '{submission_field_name_on_containing_entity}'.\")\n\n\n# --- Main script execution ---\ncontaining_entity = seal.get_containing_entity()\n\n# Fetch latest versions of templates\nreagent_template_entity = seal.get_entity(entity_id=REAGENT_TEMPLATE_ID)\nantibody_template_entity = seal.get_entity(entity_id=ANTIBODY_TEMPLATE_ID)\n\nif not reagent_template_entity:\n    seal.throw_error(f\"Error: Reagent template with ID {REAGENT_TEMPLATE_ID} not found.\")\nif not antibody_template_entity:\n    seal.throw_error(f\"Error: Antibody template with ID {ANTIBODY_TEMPLATE_ID} not found.\")\n\nreagent_template_id_version = reagent_template_entity[\"version\"]\nantibody_template_id_version = antibody_template_entity[\"version\"]\n\nprint(f\"DEBUG: Latest Reagent Template Version: {reagent_template_id_version}\")\nprint(f\"DEBUG: Latest Antibody Template Version: {antibody_template_id_version}\")\n\nsubpart_1_ref_id = get_first_ref_id(containing_entity, \"Subpart 1\")\nif not subpart_1_ref_id:\n    seal.throw_error(\"Error: 'Subpart 1' field is empty or not found in the containing entity.\")\nsubpart_1_entity = seal.get_entity(entity_id=subpart_1_ref_id)\nprint(f\"Retrieved Subpart 1 entity: {subpart_1_entity.get('title', subpart_1_ref_id)}\")\n\nsubpart_2_entity = None\nsubpart_2_ref_id = get_first_ref_id(containing_entity, \"Subpart 2\")\nif subpart_2_ref_id:\n    subpart_2_entity = seal.get_entity(entity_id=subpart_2_ref_id)\n    print(f\"Retrieved Subpart 2 entity: {subpart_2_entity.get('title', subpart_2_ref_id)}\")\nelse:\n    print(\"Info: 'Subpart 2' field is empty or not found in the containing entity. Proceeding with only Subpart 1.\")\n\nentity_cache = {\n    subpart_1_ref_id: subpart_1_entity,\n}\nif subpart_2_entity:\n    entity_cache[subpart_2_ref_id] = subpart_2_entity\n\n# --- Collect all reagents/antibodies upfront ---\nexplicit_reagents_subpart1 = get_explicit_reagent_data(subpart_1_entity, [\"Reagent 1\", \"Reagent 2\"], entity_cache)\nexplicit_reagents_subpart2 = []\nif subpart_2_entity:\n    explicit_reagents_subpart2 = get_explicit_reagent_data(subpart_2_entity, [\"Reagent 1\", \"Reagent 2\"], entity_cache)\n\nantibodies_subpart1_refs = get_antibodies_from_subpart_search(subpart_1_entity, entity_cache)\nantibodies_subpart2_refs = []\nif subpart_2_entity:\n    antibodies_subpart2_refs = get_antibodies_from_subpart_search(subpart_2_entity, entity_cache)\n\n# Identify common antibodies\nall_antibody_ids_subpart1 = {ref[\"id\"] for ref in antibodies_subpart1_refs}\nall_antibody_ids_subpart2 = {ref[\"id\"] for ref in antibodies_subpart2_refs}\ncommon_antibody_ids = all_antibody_ids_subpart1.intersection(all_antibody_ids_subpart2)\n\ncommon_antibody_entities_ordered = []\nfor antibody_id in common_antibody_ids:\n    entity = entity_cache.get(antibody_id)\n    if entity:\n        common_antibody_entities_ordered.append(entity)\n\n# Sort common antibodies based on Subpart 1's volume\ncommon_antibody_entities_ordered.sort(key=lambda x: get_volume_value(x, subpart_1_entity.get('title', '')), reverse=True)\n\n# Identify unique antibodies for each subpart\nunique_antibodies_subpart1 = []\nunique_antibodies_subpart2 = []\n\nfor ref in antibodies_subpart1_refs:\n    if ref[\"id\"] not in common_antibody_ids:\n        entity = entity_cache.get(ref[\"id\"])\n        if entity:\n            unique_antibodies_subpart1.append(entity)\n# Sort unique antibodies for subpart 1\nunique_antibodies_subpart1.sort(key=lambda x: get_volume_value(x, subpart_1_entity.get('title', '')), reverse=True)\n\n\nif subpart_2_entity:\n    for ref in antibodies_subpart2_refs:\n        if ref[\"id\"] not in common_antibody_ids:\n            entity = entity_cache.get(ref[\"id\"])\n            if entity:\n                unique_antibodies_subpart2.append(entity)\n    # Sort unique antibodies for subpart 2\n    unique_antibodies_subpart2.sort(key=lambda x: get_volume_value(x, subpart_2_entity.get('title', '')), reverse=True)\n\n\n# --- Process Submission Table 1 ---\nprocess_and_submit_table_data(\n    table_num=1,\n    containing_entity=containing_entity,\n    current_subpart_entity_title=subpart_1_entity.get('title', ''),\n    submission_field_name_on_containing_entity=\"1. Reagents\",\n    explicit_reagent_data=explicit_reagents_subpart1,\n    common_antibody_entities_ordered=common_antibody_entities_ordered,\n    unique_antibody_entities_for_this_table=unique_antibodies_subpart1,\n    reagent_template_id_version=reagent_template_id_version,\n    antibody_template_id_version=antibody_template_id_version\n)\n\n# --- Process Submission Table 2 (if exists) ---\nif subpart_2_entity:\n    process_and_submit_table_data(\n        table_num=2,\n        containing_entity=containing_entity,\n        current_subpart_entity_title=subpart_2_entity.get('title', ''),\n        submission_field_name_on_containing_entity=\"2. Reagents\",\n        explicit_reagent_data=explicit_reagents_subpart2,\n        common_antibody_entities_ordered=common_antibody_entities_ordered, # Same common antibodies\n        unique_antibody_entities_for_this_table=unique_antibodies_subpart2,\n        reagent_template_id_version=reagent_template_id_version,\n        antibody_template_id_version=antibody_template_id_version\n    )\n\nprint(\"Script finished successfully.\")"
    }
  }
}
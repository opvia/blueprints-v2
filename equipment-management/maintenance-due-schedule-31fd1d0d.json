{
  "schemaVersion": "2.0.0",
  "id": "31fd1d0d-3ea5-480c-88cc-3e420703f4f8",
  "title": "Maintenance Due - Schedule",
  "status": "EDITABLE",
  "version": null,
  "previousVersion": null,
  "metadata": {
    "index": "0",
    "createdAt": "1970-01-01T00:00:00.000Z",
    "lastUpdatedAt": "1970-01-01T00:00:00.000Z",
    "createdByRoleId": "44444444-4444-4444-8888-444444444444",
    "lastUpdatedByRoleId": "44444444-4444-4444-8888-444444444444",
    "editors": [],
    "typeIndex": "0"
  },
  "sourceInfo": {
    "template": {
      "id": "911121f8-6c0f-47bf-89a0-a547488bcc94",
      "version": "1"
    }
  },
  "fields": {},
  "kind": "INSTANCE",
  "type": {
    "ref": {
      "id": "281a04e0-f03e-4a43-8702-d86f1b6d0feb"
    }
  },
  "content": {
    "type": "SCRIPT_CODE",
    "value": {
      "triggers": [
        {
          "id": "28382757-a670-4dfc-bd1a-9fec874d30aa",
          "name": "Maintenance Due?",
          "schedule": "*/5 * * * *",
          "description": "Checks if any maintenance is due on any equipment every 5 mins, creates maintenance instances and assigns them to the responsible person(s). Also updates Equipment to \"Ready for Use\" if there is no maintenance due.",
          "systemEvent": "onSchedule"
        }
      ],
      "scriptCode": "import datetime\nimport pandas as pd\n\n# Constants for field names and status tags\nMAINTENANCE_SCHEDULE_TEMPLATE_NAME = \"Maintenance Schedule\"\nEQUIPMENT_MAINTENANCE_TEMPLATE_NAME = \"Equipment Maintenance\"\nEQUIPMENT_TYPE_NAME = \"Equipment\" # Assuming \"Equipment\" is a Type\nDATE_OF_NEXT_MAINTENANCE_FIELD = \"Date of Next Maintenance\"\nEQUIPMENT_FIELD = \"Equipment\"\nSCHEDULE_INFORMATION_FIELD = \"Schedule information\"\nRESPONSIBLE_PERSONS_FIELD = \"Responsible Person(s)\"\nSTATUS_TAG_MAINTENANCE_DUE = \"Maintenance Due\"\nSTATUS_TAG_READY_FOR_USE = \"Ready For Use\" # Corrected from \"Ready for Use\" for consistency\n\ndef get_template_id_by_name(template_name):\n    \"\"\"Searches for a template by name and returns its ID.\"\"\"\n    query_config = {\n        \"filters\": {\n            \"kind\": [\"TEMPLATE\"],\n            \"text\": [template_name]\n        }\n    }\n    templates = seal.search_entities(query_config)\n    if not templates:\n        raise ValueError(f\"Template '{template_name}' not found.\")\n    return templates[0][\"id\"]\n\ndef get_type_id_by_name(type_name):\n    \"\"\"Searches for a type by name and returns its ID.\"\"\"\n    query_config = {\n        \"filters\": {\n            \"kind\": [\"TYPE\"],\n            \"text\": [type_name]\n        }\n    }\n    types = seal.search_entities(query_config)\n    if not types:\n        raise ValueError(f\"Type '{type_name}' not found.\")\n    return types[0][\"id\"]\n\ndef is_maintenance_due(date_str):\n    \"\"\"Checks if a given date string is in the past, today, or tomorrow.\"\"\"\n    if not date_str:\n        return False\n    \n    try:\n        maintenance_date = datetime.datetime.fromisoformat(date_str).date()\n    except ValueError:\n        print(f\"Warning: Could not parse date string '{date_str}'. Skipping date check.\")\n        return False\n\n    today = datetime.date.today()\n    tomorrow = today + datetime.timedelta(days=1)\n\n    return maintenance_date <= tomorrow\n\ndef update_entity_status_and_make_editable(entity_id, target_status_tag):\n    \"\"\"Makes an entity editable and updates its status tag if different.\"\"\"\n    entity = seal.get_entity(entity_id)\n    \n    if entity[\"status\"] != \"EDITABLE\":\n        print(f\"Making entity '{entity['title']}' ({entity_id}) editable...\")\n        entity = seal.make_entity_editable(entity_id)\n        print(f\"Entity '{entity['title']}' ({entity_id}) is now editable.\")\n\n    current_status_tag = entity.get(\"statusTag\", {}).get(\"text\")\n\n    if current_status_tag != target_status_tag:\n        print(f\"Updating status tag for entity '{entity['title']}' ({entity_id}) from '{current_status_tag}' to '{target_status_tag}'...\")\n        seal.update_entity_status_tag(entity_id, target_status_tag)\n        entity = seal.get_entity(entity_id) # Re-fetch to get updated status tag\n        print(f\"Status tag for entity '{entity['title']}' ({entity_id}) updated to '{target_status_tag}'.\")\n    else:\n        print(f\"Status tag for entity '{entity['title']}' ({entity_id}) is already '{target_status_tag}'. No change needed.\")\n    return entity\n\ndef get_assignees_from_user_field(entity, field_name):\n    \"\"\"Extracts user IDs from a USER field for use as assignees.\"\"\"\n    assignee_field = entity.get(\"fields\", {}).get(field_name, {})\n    assignee_values = assignee_field.get(\"value\", []) # This correctly gets the list of strings\n    \n    assignees = []\n    # Iterate directly over the values, which are already user IDs (strings)\n    for val in assignee_values:\n        if isinstance(val, str):\n            assignees.append(val)\n    \n    # Removed the debug print, as the issue is now understood\n    return assignees\n\n# --- Main Script Logic ---\nprint(\"Starting maintenance scheduling script...\")\n\n# 1. Get template/type IDs\nmaintenance_schedule_template_id = get_template_id_by_name(MAINTENANCE_SCHEDULE_TEMPLATE_NAME)\nequipment_maintenance_template_id = get_template_id_by_name(EQUIPMENT_MAINTENANCE_TEMPLATE_NAME)\nequipment_type_id = get_type_id_by_name(EQUIPMENT_TYPE_NAME)\n\ndue_equipment_ids = set() \n\n# Part 1: Check Maintenance Schedules and update Equipment, create Maintenance Events\nprint(f\"\\n--- Processing '{MAINTENANCE_SCHEDULE_TEMPLATE_NAME}' instances ---\")\nmaintenance_schedules = seal.search_entities({\"filters\": {\"template\": [maintenance_schedule_template_id]}})\n\nfor ms_instance in maintenance_schedules:\n    ms_id = ms_instance[\"id\"]\n    ms_title = ms_instance[\"title\"]\n    \n    ms_instance_full = seal.get_entity(ms_id) \n    print(f\"\\nChecking Maintenance Schedule: '{ms_title}' ({ms_id})\")\n\n    date_of_next_maintenance_field = ms_instance_full.get(\"fields\", {}).get(DATE_OF_NEXT_MAINTENANCE_FIELD, {})\n    date_str = date_of_next_maintenance_field.get(\"value\")\n\n    if is_maintenance_due(date_str):\n        print(f\"Maintenance for '{ms_title}' is due or upcoming (Date: {date_str}).\")\n\n        equipment_field = ms_instance_full.get(\"fields\", {}).get(EQUIPMENT_FIELD, {})\n        equipment_refs = equipment_field.get(\"value\", [])\n\n        if equipment_refs:\n            equipment_ref = equipment_refs[0]\n            equipment_id = equipment_ref[\"id\"]\n            \n            due_equipment_ids.add(equipment_id) \n\n            print(f\"Associated Equipment ID: {equipment_id}\")\n\n            # Check for existing Equipment Maintenance instance in draft for this schedule and equipment\n            existing_em_query = {\n                \"filters\": {\n                    \"template\": [equipment_maintenance_template_id],\n                    \"status\": [\"EDITABLE\"], # Look for instances in draft state\n                    \"fieldValue\": [\n                        {\"name\": EQUIPMENT_FIELD, \"operator\": \"=\", \"value\": f\"ref({equipment_id})\"},\n                        {\"name\": SCHEDULE_INFORMATION_FIELD, \"operator\": \"=\", \"value\": f\"ref({ms_id})\"}\n                    ]\n                }\n            }\n            existing_em_instances = seal.search_entities(existing_em_query)\n\n            if existing_em_instances:\n                print(f\"An editable '{EQUIPMENT_MAINTENANCE_TEMPLATE_NAME}' instance already exists for Equipment '{equipment_id}' and Schedule '{ms_id}'. Skipping creation of new instance.\")\n                # We still want to update the equipment status if needed\n                update_entity_status_and_make_editable(equipment_id, STATUS_TAG_MAINTENANCE_DUE)\n                continue # Skip to next maintenance schedule\n\n            # Make Equipment editable and update status tag to 'Maintenance Due'\n            updated_equipment_entity = update_entity_status_and_make_editable(equipment_id, STATUS_TAG_MAINTENANCE_DUE)\n            \n            # Create new Equipment Maintenance instance\n            print(f\"Creating new '{EQUIPMENT_MAINTENANCE_TEMPLATE_NAME}' instance...\")\n            \n            responsible_persons_assignees = get_assignees_from_user_field(ms_instance_full, RESPONSIBLE_PERSONS_FIELD)\n            if responsible_persons_assignees:\n                print(f\"Found {len(responsible_persons_assignees)} responsible person(s) for assignment.\")\n            else:\n                print(\"No responsible persons found for assignment.\")\n            \n            new_em_instance = seal.create_instance_from_template(\n                template_id=equipment_maintenance_template_id,\n                field_values={\n                    EQUIPMENT_FIELD: [{\"id\": equipment_id, \"version\": None}],\n                    SCHEDULE_INFORMATION_FIELD: [{\"id\": ms_id, \"version\": None}]\n                },\n                title=f\"Maintenance for {updated_equipment_entity['title']} from {ms_title}\"\n            )\n            print(f\"Created Equipment Maintenance instance: '{new_em_instance['title']}' ({new_em_instance['id']})\\n\")\n            \n            if responsible_persons_assignees:\n                seal.set_assignees(new_em_instance[\"id\"], responsible_persons_assignees)\n                print(f\"Assigned {len(responsible_persons_assignees)} responsible person(s) to new Equipment Maintenance instance ({new_em_instance['id']}).\")\n\n        else:\n            print(f\"No Equipment associated with Maintenance Schedule '{ms_title}'. Skipping this schedule.\")\n    else:\n        print(f\"Maintenance for '{ms_title}' is not yet due (Date: {date_str}). Skipping this schedule.\")\n\n# Part 2: Clean up \"Maintenance Due\" status for Equipment that are no longer due\nprint(f\"\\n--- Cleaning up '{EQUIPMENT_TYPE_NAME}' instances with '{STATUS_TAG_MAINTENANCE_DUE}' status ---\")\n\nequipment_due_query = {\n    \"filters\": {\n        \"type\": [equipment_type_id],\n        \"statusTag\": [STATUS_TAG_MAINTENANCE_DUE]\n    }\n}\nequipment_due_instances = seal.search_entities(equipment_due_query)\n\nfor eq_instance in equipment_due_instances:\n    eq_id = eq_instance[\"id\"]\n    eq_title = eq_instance[\"title\"]\n    \n    eq_instance_full = seal.get_entity(eq_id)\n    print(f\"\\nChecking Equipment: '{eq_title}' ({eq_id}) for overdue maintenance status.\")\n\n    if eq_id in due_equipment_ids:\n        print(f\"Equipment '{eq_title}' is still identified as due for maintenance. Keeping status as '{STATUS_TAG_MAINTENANCE_DUE}'.\")\n        continue\n\n    referencing_ms_query = {\n        \"filters\": {\n            \"template\": [maintenance_schedule_template_id],\n            \"fieldValue\": [{\n                \"name\": EQUIPMENT_FIELD,\n                \"operator\": \"=\",\n                \"value\": f\"ref({eq_id})\"\n            }]\n        }\n    }\n    referencing_ms_instances = seal.search_entities(referencing_ms_query)\n\n    still_due_via_ms = False\n    for ref_ms in referencing_ms_instances:\n        ref_ms_full = seal.get_entity(ref_ms[\"id\"])\n        ref_ms_date_str = ref_ms_full.get(\"fields\", {}).get(DATE_OF_NEXT_MAINTENANCE_FIELD, {}).get(\"value\")\n        if is_maintenance_due(ref_ms_date_str):\n            still_due_via_ms = True\n            print(f\"Found active Maintenance Schedule '{ref_ms_full['title']}' ({ref_ms_full['id']}) referencing '{eq_title}' with due date {ref_ms_date_str}. Keeping status as '{STATUS_TAG_MAINTENANCE_DUE}'.\")\n            break\n\n    if not still_due_via_ms:\n        print(f\"No active Maintenance Schedule found for Equipment '{eq_title}' with a due date. Updating status to '{STATUS_TAG_READY_FOR_USE}'.\")\n        update_entity_status_and_make_editable(eq_id, STATUS_TAG_READY_FOR_USE)\n\nprint(\"\\nMaintenance scheduling script finished.\")"
    }
  }
}
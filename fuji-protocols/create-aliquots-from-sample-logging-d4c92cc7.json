{
  "schemaVersion": "2.0.0",
  "id": "d4c92cc7-9e50-4cce-85bb-ec7157edba9a",
  "title": "Create aliquots from sample logging",
  "status": "EDITABLE",
  "version": null,
  "previousVersion": null,
  "metadata": {
    "index": "0",
    "createdAt": "1970-01-01T00:00:00.000Z",
    "lastUpdatedAt": "1970-01-01T00:00:00.000Z",
    "createdByRoleId": "44444444-4444-4444-8888-444444444444",
    "lastUpdatedByRoleId": "44444444-4444-4444-8888-444444444444",
    "editors": [],
    "typeIndex": "0"
  },
  "sourceInfo": {
    "template": {
      "id": "03e2070a-d229-4841-b09d-2e2b7c91406d",
      "version": "1.1"
    }
  },
  "fields": {},
  "kind": "INSTANCE",
  "type": {
    "ref": {
      "id": "3304d856-7127-4d7a-b333-14c24d451629"
    }
  },
  "content": {
    "type": "SCRIPT_CODE",
    "value": {
      "scriptCode": "import pandas as pd\n\n# Define field names used in the script\nSAMPLE_DETAILS_FIELD = \"Sample details\"\nNUMBER_OF_ALIQUOTS_FIELD = \"Number of aliquots\"\nALIQUOT_DETAILS_FIELD = \"Aliquot details\"\nPARENT_SAMPLE_FIELD = \"Parent sample\"\nALIQUOT_NUMBER_FIELD = \"Aliquot number\" # New field for aliquot numbering\n\n# Get the containing entity where the script is embedded\ncontaining_entity = seal.get_containing_entity()\n\n# Extract references from the 'Sample details' submission field\nsample_details_refs = containing_entity[\"fields\"].get(SAMPLE_DETAILS_FIELD, {}).get(\"value\", [])\n\n# List to store data for new aliquot entities\naliquot_data_to_submit = []\n\nif not sample_details_refs:\n    print(f\"No entities found in '{SAMPLE_DETAILS_FIELD}' submission field.\")\nelse:\n    # Iterate through each entity referenced in 'Sample details'\n    for sample_ref in sample_details_refs:\n        # Get the full entity data for the current sample\n        sample_entity = seal.get_entity(ref=sample_ref)\n        \n        # Extract the 'Number of aliquots' value\n        num_aliquots = sample_entity[\"fields\"].get(NUMBER_OF_ALIQUOTS_FIELD, {}).get(\"value\")\n\n        if num_aliquots is None or not isinstance(num_aliquots, (int, float)) or num_aliquots < 0:\n            print(f\"Warning: '{NUMBER_OF_ALIQUOTS_FIELD}' field is invalid or missing for sample '{sample_entity.get('title', sample_entity['id'])}'. Skipping aliquot creation for this sample.\")\n            continue\n        \n        num_aliquots = int(num_aliquots) # Ensure it's an integer\n\n        # Create 'Y' aliquot entities for the current sample\n        for i in range(num_aliquots):\n            aliquot_entity_fields = {\n                # Set the 'Parent Sample' field to reference the current sample entity\n                PARENT_SAMPLE_FIELD: [{\"id\": sample_entity[\"id\"], \"version\": sample_entity[\"version\"]}],\n                ALIQUOT_NUMBER_FIELD: i + 1, # Assign sequential aliquot number\n                \"Title\": f\"{sample_entity.get('title', 'Untitled Sample')} Aliquot {i+1}\" # Example title\n            }\n            aliquot_data_to_submit.append(aliquot_entity_fields)\n\n# Convert the list of dictionaries to a pandas DataFrame\naliquot_df = pd.DataFrame(aliquot_data_to_submit)\n\nif not aliquot_df.empty:\n    # Submit the DataFrame to the 'Aliquot details' submission field\n    seal.submit_to_instance_submission_field(\n        ALIQUOT_DETAILS_FIELD,\n        field_values_df=aliquot_df\n    )\n    print(f\"Successfully created {len(aliquot_df)} aliquot entities in '{ALIQUOT_DETAILS_FIELD}'.\")\nelse:\n    print(\"No aliquot entities were created.\")"
    }
  }
}
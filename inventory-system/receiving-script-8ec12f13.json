{
  "schemaVersion": "2.0.0",
  "id": "8ec12f13-cffb-4dea-9c50-e6a44239f6f3",
  "title": "Receiving Script",
  "status": "EDITABLE",
  "version": null,
  "previousVersion": null,
  "metadata": {
    "index": "0",
    "createdAt": "1970-01-01T00:00:00.000Z",
    "lastUpdatedAt": "1970-01-01T00:00:00.000Z",
    "createdByRoleId": "44444444-4444-4444-4444-444444444444",
    "lastUpdatedByRoleId": "44444444-4444-4444-4444-444444444444",
    "editors": [],
    "typeIndex": "0"
  },
  "sourceInfo": {
    "template": {
      "id": "d43adebc-8c8d-446a-b581-26de5fb81ecd",
      "version": "1"
    }
  },
  "fields": {},
  "kind": "INSTANCE",
  "type": {
    "ref": {
      "id": "77138cf0-1a9f-43bb-9060-ba4c2806d02d"
    }
  },
  "content": {
    "type": "SCRIPT_CODE",
    "value": {
      "scriptCode": "import pandas as pd\n\n# --- Configuration ---\n# These are the IDs of the templates in Seal that this script will use\n# Replace these with the correct values for your environment.\nCOMPONENT_TEMPLATE_ID = \"bac260ff-7db9-4460-94a2-c3a2c1e5dc4f\"\nCOMPONENT_BALANCE_TEMPLATE_ID = \"984ba139-ab1a-47cc-9b4d-52cafcf524ad\"\nCREATION_TEMPLATE_ID = \"c4dcdd80-bde7-4150-bbd0-0ea833cdb432\"\n\n# --- Field Names ---\n# These must match the field names in your Seal templates exactly.\nRECEIVED_GOODS_SUBMISSION_FIELD_NAME = \"Received Goods\"\nSPEC_REFERENCE_FIELD_NAME = \"Specification Reference\"\nTRACKING_CATEGORY_FIELD_NAME = \"Tracking Category\"\nQUANTITY_FIELD_NAME = \"Quantity\"\nCOMPONENT_REFERENCE_FIELD_NAME = \"Component Reference\"\nADDITIONS_FIELD_NAME = \"Inventory Additions\"\nBATCH_ID_FIELD_NAME = \"Batch ID\"\n\n# Fields in the Creation template\nCREATION_COMPONENT_REFERENCE_FIELD_NAME = \"Component Reference\"\nCREATION_QUANTITY_FIELD_NAME = \"Quantity\"\n\n# Fields in the Component template\nCOMP_SPEC_REFERENCE_FIELD_NAME = \"Specification\"\nCOMP_TRACKING_CATEGORY_FIELD_NAME = \"Tracking Category\"\nCOMP_QUANTITY_FIELD_NAME = \"Initial Quantity\"\nCOMP_ID_FIELD_NAME = \"Component ID\"\n\n# Fields in the Component Balance template\nCOMP_BALANCE_SPEC_REFERENCE_FIELD_NAME = \"Specification Reference\"\nCOMP_BALANCE_COMP_REFERENCE_FIELD_NAME = \"Component Reference\"\nCOMP_BALANCE_ADDITIONS_FIELD_NAME = \"Inventory Additions\"\n\n\ndef run_script():\n    \"\"\"\n    Main function that processes 'Received Goods' in a containing entity\n    and automatically generates:\n      - Component entities\n      - Creation entities\n      - Component Balance entities\n    It also ensures cleanup if something goes wrong.\n    \"\"\"\n\n    # Get the entity where this script is running\n    containing_entity = seal.get_containing_entity()\n\n    # Get the change set (group of changes) so all new entities are grouped together\n    change_set = seal.get_change_set_for_containing_entity()\n    change_set_index = change_set['index']\n\n    if not containing_entity:\n        print(\"Error: This script must be run from within an entity.\")\n        return\n\n    print(f\"Processing containing entity: {containing_entity.get('title', containing_entity['id'])}\")\n\n    # Look for the \"Received Goods\" field in the containing entity\n    received_goods_field = containing_entity[\"fields\"].get(RECEIVED_GOODS_SUBMISSION_FIELD_NAME)\n\n    if not received_goods_field or not received_goods_field.get(\"value\"):\n        print(f\"No '{RECEIVED_GOODS_SUBMISSION_FIELD_NAME}' found or it is empty in the containing entity.\")\n        return\n\n    # Will collect references to all Additions for linking later\n    created_additions_refs = []\n\n    # Track ALL new entity IDs created so we can delete (archive) them if something fails\n    all_created_ids = []\n\n    try:\n        # Loop through every item listed in the \"Received Goods\" field\n        for item_ref in received_goods_field[\"value\"]:\n            received_item_id = item_ref[\"id\"]\n\n            # Load the full entity for this received item\n            received_item_entity = seal.get_entity(entity_id=received_item_id)\n            received_item_fields = received_item_entity.get(\"fields\", {})\n\n            # Extract required values\n            spec_reference = received_item_fields.get(SPEC_REFERENCE_FIELD_NAME, {}).get(\"value\")\n            tracking_category = received_item_fields.get(TRACKING_CATEGORY_FIELD_NAME, {}).get(\"value\")[0]\n            quantity = received_item_fields.get(QUANTITY_FIELD_NAME, {}).get(\"value\")\n            comp_id = received_item_fields.get(BATCH_ID_FIELD_NAME, {}).get(\"value\")\n\n            # If any required values are missing, stop immediately and rollback everything\n            if not all([spec_reference, tracking_category, quantity is not None]):\n                raise ValueError(\n                    f\"Received item {received_item_id} is missing required fields \"\n                    f\"(Specification Reference, Tracking Category, or Quantity).\"\n                )\n\n            print(f\"\\n--- Processing received item: {received_item_entity.get('title', received_item_id)} ---\")\n            print(f\"  Tracking Category: {tracking_category}, Quantity: {quantity}\")\n\n            # Make the received item editable if itâ€™s not already\n            if received_item_entity[\"status\"] != \"EDITABLE\":\n                print(f\"  Making received item {received_item_id} editable to update its fields.\")\n                received_item_entity = seal.make_entity_editable(received_item_id)\n                received_item_fields = received_item_entity.get(\"fields\", {})\n\n            # Store new components linked to this received item\n            new_component_refs_for_received_item = []\n\n            # --- Case 1: Serialised (create one Component and one Creation per unit) ---\n            if tracking_category == \"Serialised\":\n                print(f\"  Creating {int(quantity)} serialised components and individual creation records.\")\n                for i in range(int(quantity)):\n                    # Create Component\n                    new_component = seal.create_instance_from_template(\n                        template_id=COMPONENT_TEMPLATE_ID,\n                        field_values={\n                            COMP_SPEC_REFERENCE_FIELD_NAME: spec_reference,\n                            COMP_TRACKING_CATEGORY_FIELD_NAME: [tracking_category],\n                            COMP_QUANTITY_FIELD_NAME: 1,\n                            COMP_ID_FIELD_NAME: comp_id + \"-\" + str(i+1)\n                        }\n                    )\n                    component_ref = {\"id\": new_component[\"id\"], \"version\": None}\n                    new_component_refs_for_received_item.append(component_ref)\n                    seal.add_entity_to_change_set(new_component['id'], change_set_index)\n                    all_created_ids.append(new_component[\"id\"])\n\n                    # Create Creation (links to Component)\n                    creation = seal.create_instance_from_template(\n                        template_id=CREATION_TEMPLATE_ID,\n                        field_values={\n                            CREATION_QUANTITY_FIELD_NAME: 1,\n                            CREATION_COMPONENT_REFERENCE_FIELD_NAME: [component_ref]\n                        }\n                    )\n                    creation_ref = {\"id\": creation[\"id\"], \"version\": None}\n                    created_additions_refs.append(creation_ref)\n                    seal.add_entity_to_change_set(creation['id'], change_set_index)\n                    all_created_ids.append(creation[\"id\"])\n\n                    # Create Component Balance (links Component + Creation)\n                    new_component_balance = seal.create_instance_from_template(\n                        template_id=COMPONENT_BALANCE_TEMPLATE_ID,\n                        field_values={\n                            COMP_BALANCE_SPEC_REFERENCE_FIELD_NAME: spec_reference,\n                            COMP_BALANCE_COMP_REFERENCE_FIELD_NAME: [component_ref],\n                            COMP_BALANCE_ADDITIONS_FIELD_NAME: [creation_ref]\n                        }\n                    )\n                    all_created_ids.append(new_component_balance[\"id\"])\n                    # Run any scripts attached to Component Balance template\n                    seal.run_embedded_scripts(new_component_balance['id'])\n\n            # --- Case 2: Batch or None (create a single Component + one Creation) ---\n            elif tracking_category in [\"Batch\", \"None\"]:\n                print(f\"  Creating 1 component (batch/none) and a single creation record.\")\n\n                # Create one Component\n                print(\"  Creating component...\")\n                new_component = seal.create_instance_from_template(\n                        template_id=COMPONENT_TEMPLATE_ID,\n                        field_values={\n                            COMP_SPEC_REFERENCE_FIELD_NAME: spec_reference,\n                            COMP_TRACKING_CATEGORY_FIELD_NAME: [tracking_category],\n                            COMP_QUANTITY_FIELD_NAME: quantity,\n                            COMP_ID_FIELD_NAME: comp_id\n                        }\n                    )\n                component_ref = {\"id\": new_component[\"id\"], \"version\": None}\n                seal.add_entity_to_change_set(new_component['id'], change_set_index)\n                new_component_refs_for_received_item.append(component_ref)\n                all_created_ids.append(new_component[\"id\"])\n\n                # Create one Creation with total quantity\n                print(\"  Creating Creation...\")\n                creation = seal.create_instance_from_template(\n                    template_id=CREATION_TEMPLATE_ID,\n                    field_values={\n                        CREATION_QUANTITY_FIELD_NAME: quantity,\n                        CREATION_COMPONENT_REFERENCE_FIELD_NAME: [component_ref]\n                    }\n                )\n                creation_ref = {\"id\": creation[\"id\"], \"version\": None}\n                created_additions_refs.append(creation_ref)\n                seal.add_entity_to_change_set(creation['id'], change_set_index)\n                all_created_ids.append(creation[\"id\"])\n\n                # Create Component Balance\n                print(\"  Creating Component Balance...\")\n                new_component_balance = seal.create_instance_from_template(\n                    template_id=COMPONENT_BALANCE_TEMPLATE_ID,\n                    field_values={\n                        COMP_BALANCE_SPEC_REFERENCE_FIELD_NAME: spec_reference,\n                        COMP_BALANCE_COMP_REFERENCE_FIELD_NAME: [component_ref],\n                        COMP_BALANCE_ADDITIONS_FIELD_NAME: [creation_ref]\n                    }\n                )\n                all_created_ids.append(new_component_balance[\"id\"])\n                seal.run_embedded_scripts(new_component_balance['id'])\n\n            # --- Case 3: Unknown category (treat as error) ---\n            else:\n                raise ValueError(\n                    f\"Received item {received_item_id} has unknown tracking category '{tracking_category}'.\"\n                )\n\n            # Update the received item with new Component references\n            current_component_refs = received_item_fields.get(COMPONENT_REFERENCE_FIELD_NAME, {}).get(\"value\") or []\n            updated_component_refs = current_component_refs + new_component_refs_for_received_item\n\n\n            print(f\"  Updating {COMPONENT_REFERENCE_FIELD_NAME} in received item...\")\n\n            seal.update_field_value_in_entity(\n                entity_id=received_item_id,\n                field_name=COMPONENT_REFERENCE_FIELD_NAME,\n                field_value=updated_component_refs\n            )\n\n            print(f\"  Updated '{COMPONENT_REFERENCE_FIELD_NAME}' in received item {received_item_id} with {len(new_component_refs_for_received_item)} new references.\")\n\n        # --- After all items processed ---\n        # Add all Creation references to the containing entity\n        current_creation_refs = containing_entity[\"fields\"].get(ADDITIONS_FIELD_NAME, {}).get(\"value\") or []\n        updated_creation_refs = current_creation_refs + created_additions_refs\n\n        seal.update_field_value_in_entity(\n            entity_id=containing_entity['id'],\n            field_name=ADDITIONS_FIELD_NAME,\n            field_value=updated_creation_refs\n        )\n\n        print(\"\\nScript finished successfully.\")\n\n    except Exception as e:\n        # Any error in the script will roll back by archiving all created entities\n        print(f\"[ERROR] Script failed: {e}\")\n        if all_created_ids:\n            try:\n                print(f\"[INFO] Archiving {len(all_created_ids)} entities due to failure...\")\n                seal.archive_entities(all_created_ids)\n            except Exception as archive_err:\n                print(f\"[WARN] Failed to archive entities: {archive_err}\")\n        raise  # Re-raise so the error is visible outside this script\n\n\n# Execute the main function\nrun_script()\n"
    }
  }
}
{
  "schemaVersion": "2.0.0",
  "id": "0ec9bebc-8e42-4900-aa20-66ba5c8de9be",
  "title": "Specification Balance Script",
  "status": "EDITABLE",
  "version": null,
  "previousVersion": null,
  "metadata": {
    "index": "0",
    "createdAt": "1970-01-01T00:00:00.000Z",
    "lastUpdatedAt": "1970-01-01T00:00:00.000Z",
    "createdByRoleId": "44444444-4444-4444-4444-444444444444",
    "lastUpdatedByRoleId": "44444444-4444-4444-4444-444444444444",
    "editors": [],
    "typeIndex": "0"
  },
  "sourceInfo": {
    "template": {
      "id": "d43adebc-8c8d-446a-b581-26de5fb81ecd",
      "version": "1"
    }
  },
  "fields": {},
  "kind": "INSTANCE",
  "type": {
    "ref": {
      "id": "77138cf0-1a9f-43bb-9060-ba4c2806d02d"
    }
  },
  "content": {
    "type": "SCRIPT_CODE",
    "value": {
      "scriptCode": "from concurrent.futures import ThreadPoolExecutor, as_completed\n\nMAX_WORKERS = 8  # tune depending on Seal API stability\n\n# ------------------------------\n# Field Names (used to reference fields in Seal entities)\n# ------------------------------\nSPEC_BAL_SPEC_REFERENCE_FIELD_NAME = \"Specification Reference\"\nSPEC_BAL_COMPONENT_BAL_REFERENCES_FIELD_NAME = \"Component Balance References\"\nSPEC_BAL_USAGES_FIELD_NAME = \"Inventory Usages\"\nSPEC_BAL_QUANTITY_USED_FIELD_NAME = \"Quantity Used\"\nSPEC_BAL_QUANTITY_CREATED_FIELD_NAME = \"Quantity Created\"\nSPEC_BAL_ADDITIONS_FIELD_NAME = \"Inventory Additions\"\nSPEC_BAL_STOCK_FIELD_NAME = \"Quantity In Stock\"\n\nCOMPONENT_BAL_SPEC_REFERENCE_FIELD_NAME = \"Specification Reference\"\nCOMPONENT_BAL_COMPONENT_REFERENCE_FIELD_NAME = \"Component Reference\"\nCOMPONENT_BAL_USAGES_FIELD_NAME = \"Inventory Usages\"\nCOMPONENT_BAL_QUANTITY_USED_FIELD_NAME = \"Quantity Used\"\nCOMPONENT_BAL_QUANTITY_CREATED_FIELD_NAME = \"Quantity Created\"\nCOMPONENT_BAL_ADDITIONS_FIELD_NAME = \"Inventory Additions\"\nCOMPONENT_BAL_STOCK_FIELD_NAME = \"Quantity In Stock\"\n\nUSAGE_QUANTITY_FIELD_NAME = \"Quantity\"\nCREATION_QUANTITY_FIELD_NAME = \"Quantity\"\n\n# ------------------------------\n# Query configs\n# ------------------------------\nCOMP_BAL_QUERY_CONFIG = {\n    \"searchType\": \"LIVE\",\n    \"filters\": {\n        \"and\": [\n            {\n                \"or\": [\n                    {\n                        \"operator\": \"in\",\n                        \"filter\": \"template\",\n                        \"value\": [\"984ba139-ab1a-47cc-9b4d-52cafcf524ad\"]  # Component Balance template ID\n                    }\n                ]\n            },\n            {\n                \"or\": [\n                    {\"operator\": \"in\", \"filter\": \"kind\", \"value\": [\"INSTANCE\"]}\n                ]\n            }\n        ]\n    }\n}\n\nUSAGE_QUERY_CONFIG = {\n    \"searchType\": \"ACTIVE_VERSIONS\",\n    \"filters\": {\n        \"and\": [\n            {\"or\": [{\"operator\": \"in\", \"filter\": \"type\", \"value\": [\"Inventory Usage\"]}]},\n            {\"or\": [{\"operator\": \"in\", \"filter\": \"kind\", \"value\": [\"INSTANCE\"]}]}\n        ]\n    }\n}\n\nCREATION_QUERY_CONFIG = {\n    \"searchType\": \"ACTIVE_VERSIONS\",\n    \"filters\": {\n        \"and\": [\n            {\"or\": [{\"operator\": \"in\", \"filter\": \"type\", \"value\": [\"Inventory Addition\"]}]},\n            {\"or\": [{\"operator\": \"in\", \"filter\": \"kind\", \"value\": [\"INSTANCE\"]}]}\n        ]\n    }\n}\n\n# ------------------------------\n# Helper\n# ------------------------------\ndef map_ref_id_to_entities(entities, field_name):\n    mapping = {}\n    for e in entities:\n        try:\n            ref_id = e['fields'][field_name]['value'][0]['id']\n            mapping.setdefault(ref_id, []).append({'id': e['id'], 'version': e['version']})\n        except (KeyError, IndexError, TypeError):\n            continue\n    return mapping\n\ndef refresh_component_balance_blocking(comp_bal_ref):\n    cb_id = comp_bal_ref['id']\n    try:\n        print(f\"[INFO] Running embedded scripts for Component Balance {cb_id}...\")\n        seal.run_embedded_scripts(cb_id)\n\n        print(f\"[INFO] Fetching updated entity for Component Balance {cb_id}...\")\n        updated_entity = seal.get_entity(cb_id)\n\n        return {\"id\": updated_entity['id'], \"version\": updated_entity.get(\"version\"), \"entity\": updated_entity}\n    except Exception as e:\n        print(f\"[WARN] Failed to refresh Component Balance {cb_id}: {e}\")\n        return comp_bal_ref  # fallback\n\n# ------------------------------\n# Main workflow\n# ------------------------------\nprint(\"[INFO] Fetching all Component Balance entities...\")\ncomp_balances = seal.search_entities(COMP_BAL_QUERY_CONFIG)\ncomp_balances_by_id = {e['id']: e for e in comp_balances}\nprint(f\"[INFO] Retrieved {len(comp_balances)} Component Balances.\")\n\ncomp_balance_map = map_ref_id_to_entities(comp_balances, COMPONENT_BAL_SPEC_REFERENCE_FIELD_NAME)\n\nprint(\"[INFO] Fetching current Specification Balance (containing entity)...\")\nspecification_balance = seal.get_containing_entity()\nspecification_bal_id = specification_balance['id']\nspecification_ref = specification_balance['fields'][SPEC_BAL_SPEC_REFERENCE_FIELD_NAME]['value'][0]\nspecification_id = specification_ref['id']\nprint(f\"[INFO] Processing Specification Balance {specification_bal_id} for Spec {specification_id}\")\n\nlinked_comp_bals = comp_balance_map.get(specification_id, [])\nprint(f\"[INFO] Found {len(linked_comp_bals)} linked Component Balances.\")\n\n# Refresh concurrently\nprint(\"[INFO] Refreshing Component Balances asynchronously...\")\nrefreshed_comp_bals = []\nwith ThreadPoolExecutor(max_workers=MAX_WORKERS) as executor:\n    futures = {executor.submit(refresh_component_balance_blocking, cb): cb for cb in linked_comp_bals}\n    for fut in as_completed(futures):\n        res = fut.result()\n        refreshed_comp_bals.append(res)\n        if isinstance(res, dict) and \"entity\" in res:\n            comp_balances_by_id[res['id']] = res['entity']\n\nprint(f\"[INFO] Updating Specification Balance {specification_bal_id} with refreshed Component Balance refs...\")\nseal.update_field_value_in_entity(specification_bal_id, SPEC_BAL_COMPONENT_BAL_REFERENCES_FIELD_NAME, refreshed_comp_bals)\n\n# ------------------------------\n# Fetch all Additions and Usages in system\n# ------------------------------\n\nprint(\"[INFO] Fetching all Creation entities...\")\nall_additions = seal.search_entities(CREATION_QUERY_CONFIG)\nprint(f\"[INFO] Retrieved {len(all_additions)} Creation entities.\")\n\nprint(\"[INFO] Fetching all Usage entities...\")\nall_usages = seal.search_entities(USAGE_QUERY_CONFIG)\nprint(f\"[INFO] Retrieved {len(all_usages)} Usage entities.\")\n\nadditions_by_id = {c['id']: c for c in all_additions}\nusages_by_id = {u['id']: u for u in all_usages}\n\n# ------------------------------\n# Collect linked Additions & Usages from Component Balances\n# ------------------------------\n\nlinked_additions = []\nlinked_usages = []\n\nfor comp_bal_ref in linked_comp_bals:\n    comp_bal = comp_balances_by_id.get(comp_bal_ref['id'])\n    if not comp_bal:\n        continue\n\n    additions = comp_bal['fields'].get(COMPONENT_BAL_ADDITIONS_FIELD_NAME, {}).get('value') or []\n    usages = comp_bal['fields'].get(COMPONENT_BAL_USAGES_FIELD_NAME, {}).get('value') or []\n\n    linked_additions.extend(additions)\n    linked_usages.extend(usages)\n\n\nlinked_creation_ids = list({c['id'] for c in linked_additions})\nlinked_usage_ids = list({u['id'] for u in linked_usages})\n\nprint(f\"[INFO] Linked Additions: {len(linked_creation_ids)}, Linked Usages: {len(linked_usage_ids)}\")\n\n# ------------------------------\n# Calculate totals\n# ------------------------------\n\ncreated_quantity = 0\nfor creation_id in linked_creation_ids:\n    creation_entity = additions_by_id.get(creation_id)\n    if creation_entity:\n        created_quantity += creation_entity['fields'][CREATION_QUANTITY_FIELD_NAME]['value']\n\nused_quantity = 0\nfor usage_id in linked_usage_ids:\n    usage_entity = usages_by_id.get(usage_id)\n    if usage_entity:\n        used_quantity += usage_entity['fields'][USAGE_QUANTITY_FIELD_NAME]['value']\n\nquantity_in_stock = created_quantity - used_quantity\n\nprint(f\"[INFO] Totals → Created: {created_quantity}, Used: {used_quantity}, Stock: {quantity_in_stock}\")\n\n# ------------------------------\n# Update the Specification Balance with results\n# ------------------------------\n\nprint(f\"[INFO] Updating Specification Balance {specification_bal_id} with calculated totals...\")\nseal.update_field_value_in_entity(specification_bal_id, SPEC_BAL_ADDITIONS_FIELD_NAME, linked_additions)\nseal.update_field_value_in_entity(specification_bal_id, SPEC_BAL_QUANTITY_CREATED_FIELD_NAME, created_quantity)\nseal.update_field_value_in_entity(specification_bal_id, SPEC_BAL_USAGES_FIELD_NAME, linked_usages)\nseal.update_field_value_in_entity(specification_bal_id, SPEC_BAL_QUANTITY_USED_FIELD_NAME, used_quantity)\nseal.update_field_value_in_entity(specification_bal_id, SPEC_BAL_STOCK_FIELD_NAME, quantity_in_stock)\n\nprint(\"[INFO] Specification Balance update complete ✅\")\n"
    }
  }
}
{
  "schemaVersion": "2.0.0",
  "id": "53b10ef1-4d06-4494-b56e-2e1ec3223bac",
  "title": "On Course Enrollment Publish",
  "status": "EDITABLE",
  "version": null,
  "previousVersion": null,
  "metadata": {
    "index": "0",
    "createdAt": "1970-01-01T00:00:00.000Z",
    "lastUpdatedAt": "1970-01-01T00:00:00.000Z",
    "createdByRoleId": "44444444-4444-4444-8888-444444444444",
    "lastUpdatedByRoleId": "44444444-4444-4444-8888-444444444444",
    "editors": [],
    "typeIndex": "0"
  },
  "sourceInfo": {
    "template": {
      "id": "c4e8a12f-dbe4-4b3e-b054-3f895ab64d0c",
      "version": "1.1"
    }
  },
  "fields": {},
  "kind": "INSTANCE",
  "type": {
    "ref": {
      "id": "66e5dce2-cfbf-4ce6-8fdf-45ee82417035"
    }
  },
  "content": {
    "type": "SCRIPT_CODE",
    "value": {
      "triggers": [
        {
          "id": "fa32b274-523b-4877-87fe-6d8565fe0dbc",
          "name": "On Course Enrollment Publish",
          "entityRefs": [
            {
              "id": "71d4d67c-a7cc-4c2d-8e7a-c5f347cc32df"
            }
          ],
          "systemEvent": "onMoveOutOfEditable",
          "appliesToEntityKinds": "INSTANCE"
        }
      ],
      "scriptCode": "\"\"\"\nCourse Enrollment - On Publish Trigger\n\nWhen a Course Enrollment is published, this script:\n1. Gets the trainee from the Trainee field\n2. Fetches the linked Course entity\n3. Extracts Controlled Procedures from the Course\n4. Grants the trainee operator access to all Controlled Procedures\n5. Creates a new enrollment for retraining (if Retraining Interval is set)\n\nThis allows trainees to execute controlled procedures after completing their training\nand automatically schedules retraining.\n\"\"\"\n\nimport pandas as pd\nfrom datetime import datetime, timedelta\n\ndef grant_controlled_procedure_access():\n    \"\"\"\n    Grant trainee operator access to controlled procedures after course completion.\n    \"\"\"\n    print(\"🎓 Course Enrollment Published - Granting Controlled Procedure Access\")\n    print(\"=\" * 70)\n    \n    try:\n        # Get the published Course Enrollment entity\n        enrollment = seal.get_containing_entity()\n        enrollment_id = enrollment[\"id\"]\n        enrollment_title = enrollment.get(\"title\", \"Untitled\")\n        \n        print(f\"✓ Processing enrollment: {enrollment_title}\")\n        \n        # Step 1: Get the trainee (always take first element)\n        trainee_field = enrollment[\"fields\"].get(\"Trainee\", {})\n        trainee_ids = trainee_field.get(\"value\")\n        \n        if not trainee_ids or len(trainee_ids) == 0:\n            print(\"⚠ No trainee found - skipping permission grant\")\n            return\n        \n        trainee_id = trainee_ids[0]  # Always take first element\n        print(f\"✓ Trainee ID: {trainee_id[:8]}...\")\n        \n        # Step 2: Get the Course entity\n        course_field = enrollment[\"fields\"].get(\"Course\", {})\n        course_refs = course_field.get(\"value\")\n        \n        if not course_refs or len(course_refs) == 0:\n            print(\"⚠ No course found - skipping permission grant\")\n            return\n        \n        course_ref = course_refs[0]\n        course_id = course_ref[\"id\"]\n        \n        print(f\"✓ Fetching course: {course_id[:8]}...\")\n        course = seal.get_entity(entity_id=course_id)\n        course_name = course.get(\"title\", \"Untitled Course\")\n        print(f\"  Course: {course_name}\")\n        \n        # Step 3: Get Controlled Procedures from the Course\n        controlled_procedures_field = course[\"fields\"].get(\"Controlled Procedures\", {})\n        procedure_refs = controlled_procedures_field.get(\"value\")\n        \n        if not procedure_refs or len(procedure_refs) == 0:\n            print(\"⚠ No controlled procedures found - skipping permission grant\")\n            return\n        \n        print(f\"✓ Found {len(procedure_refs)} controlled procedure(s)\")\n        \n        # Step 4: Grant operator access to each controlled procedure\n        granted_count = 0\n        skipped_count = 0\n        error_count = 0\n        \n        for i, proc_ref in enumerate(procedure_refs, 1):\n            proc_id = proc_ref[\"id\"]\n            \n            try:\n                # Fetch the procedure entity\n                procedure = seal.get_entity(entity_id=proc_id)\n                proc_title = procedure.get(\"title\", f\"Procedure {proc_id[:8]}\")\n                \n                print(f\"\\n  [{i}/{len(procedure_refs)}] Processing: {proc_title}\")\n                \n                # Get current permissions\n                current_permissions = seal.get_permissions_for_entity(entity_id=proc_id)\n                current_operators = current_permissions.get(\"operators\", [])\n                \n                # Check if trainee is already an operator\n                if trainee_id in current_operators:\n                    print(f\"    ⊳ Trainee already has operator access - skipping\")\n                    skipped_count += 1\n                    continue\n                \n                # Add trainee to operators list (append)\n                new_operators = current_operators + [trainee_id]\n                \n                # Update permissions\n                seal.set_permissions_for_entity(\n                    entity_id=proc_id,\n                    operators=new_operators\n                )\n                \n                print(f\"    ✓ Granted operator access\")\n                granted_count += 1\n                \n            except Exception as e:\n                print(f\"    ⚠ Warning: Failed to grant access - {str(e)}\")\n                error_count += 1\n                continue\n        \n        # Summary\n        print()\n        print(\"=\" * 70)\n        print(\"📊 SUMMARY\")\n        print(\"=\" * 70)\n        print(f\"✓ Granted access: {granted_count} procedure(s)\")\n        if skipped_count > 0:\n            print(f\"⊳ Already had access: {skipped_count} procedure(s)\")\n        if error_count > 0:\n            print(f\"⚠ Errors: {error_count} procedure(s)\")\n        print(\"✓ Permission grant complete!\")\n        \n    except Exception as e:\n        print()\n        print(\"=\" * 70)\n        print(\"❌ ERROR\")\n        print(\"=\" * 70)\n        print(f\"Failed to grant controlled procedure access: {str(e)}\")\n        raise\n\n\ndef create_retraining_enrollment():\n    \"\"\"\n    Create a new enrollment for retraining if Retraining Interval is set.\n    \"\"\"\n    print()\n    print(\"🔄 Checking for Retraining Requirements\")\n    print(\"=\" * 70)\n    \n    try:\n        # Get the published Course Enrollment entity\n        enrollment = seal.get_containing_entity()\n        \n        # Get the trainee (always take first element)\n        trainee_field = enrollment[\"fields\"].get(\"Trainee\", {})\n        trainee_ids = trainee_field.get(\"value\")\n        \n        if not trainee_ids or len(trainee_ids) == 0:\n            print(\"⚠ No trainee found - skipping retraining enrollment\")\n            return\n        \n        trainee_id = trainee_ids[0]\n        \n        # Get the Course entity\n        course_field = enrollment[\"fields\"].get(\"Course\", {})\n        course_refs = course_field.get(\"value\")\n        \n        if not course_refs or len(course_refs) == 0:\n            print(\"⚠ No course found - skipping retraining enrollment\")\n            return\n        \n        course_ref = course_refs[0]\n        \n        # Get the Training Request via the formula field\n        training_request_field = enrollment[\"fields\"].get(\"Training Request\", {})\n        training_request_refs = training_request_field.get(\"value\")\n        \n        if not training_request_refs or len(training_request_refs) == 0:\n            print(\"⚠ No training request found - skipping retraining enrollment\")\n            return\n        \n        training_request_id = training_request_refs[0][\"id\"]\n        training_request = seal.get_entity(entity_id=training_request_id)\n        \n        print(f\"✓ Training Request: {training_request.get('title', 'Untitled')}\")\n        \n        # Get Retraining Interval (Days)\n        retraining_interval_days = training_request[\"fields\"].get(\n            \"Retraining Interval (Days)\", {}\n        ).get(\"value\")\n        \n        if not retraining_interval_days or retraining_interval_days <= 0:\n            print(\"⚠ No retraining interval set - skipping retraining enrollment\")\n            return\n        \n        print(f\"✓ Retraining interval: {retraining_interval_days} days\")\n        \n        # Calculate due date (today + retraining interval)\n        future_date = datetime.now() + timedelta(days=retraining_interval_days)\n        due_date = future_date.strftime(\"%Y-%m-%d\")\n        \n        print(f\"✓ Calculated retraining due date: {due_date}\")\n        \n        # Create new enrollment\n        print(f\"✓ Creating retraining enrollment...\")\n        \n        new_enrollment_data = pd.DataFrame([{\n            \"Trainee\": [trainee_id],\n            \"Course\": [course_ref],\n            \"Due Date\": due_date,\n        }])\n        \n        seal.submit_to_instance_submission_field_in_entity(\n            entity_id=training_request_id,\n            field_name=\"Course Enrollments\",\n            field_values_df=new_enrollment_data,\n        )\n        \n        print(\"✓ Retraining enrollment created successfully!\")\n        \n    except Exception as e:\n        print()\n        print(\"=\" * 70)\n        print(\"❌ ERROR\")\n        print(\"=\" * 70)\n        print(f\"Failed to create retraining enrollment: {str(e)}\")\n        # Don't raise - this is a non-critical error\n        print(\"⚠ Continuing despite retraining enrollment failure\")\n\n\n# Run the script\ngrant_controlled_procedure_access()\ncreate_retraining_enrollment()"
    }
  }
}
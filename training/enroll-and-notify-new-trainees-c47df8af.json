{
  "schemaVersion": "2.0.0",
  "id": "c47df8af-7318-422a-990c-5f32e6cce60e",
  "title": "Enroll and notify new trainees",
  "status": "EDITABLE",
  "version": null,
  "previousVersion": null,
  "metadata": {
    "index": "0",
    "createdAt": "1970-01-01T00:00:00.000Z",
    "lastUpdatedAt": "1970-01-01T00:00:00.000Z",
    "createdByRoleId": "44444444-4444-4444-4444-444444444444",
    "lastUpdatedByRoleId": "44444444-4444-4444-4444-444444444444",
    "editors": [],
    "typeIndex": "0"
  },
  "sourceInfo": {
    "template": {
      "id": "409eb700-5474-4553-b886-5e4f84f2877d",
      "version": "1"
    }
  },
  "fields": {},
  "kind": "INSTANCE",
  "type": {
    "ref": {
      "id": "e1055cf8-3b0c-4ea4-89ee-0743d7f2aecf"
    }
  },
  "content": {
    "type": "SCRIPT_CODE",
    "value": {
      "scriptCode": "import pandas as pd\nfrom datetime import datetime, timedelta\n\ndef create_course_enrollments():\n    # 1. Get values from 'Trainees' and 'Courses' fields from the containing entity\n    containing_entity = seal.get_containing_entity()\n\n    # Retrieve the trainee IDs from the 'Trainees' field\n    # This field is configured as a multi-select User field (returns an array)\n    trainee_ids = containing_entity[\"fields\"].get(\"Trainees\", {}).get(\"value\", [])\n\n    # Retrieve the list of course entity references from the 'Courses' field\n    # This field is configured as a multi-select Reference field\n    course_refs = containing_entity[\"fields\"].get(\"Courses\", {}).get(\"value\", [])\n\n    # Get completion deadline in days (NUMBER field)\n    completion_deadline_days = containing_entity[\"fields\"].get(\"Completion Deadline (Days)\", {}).get(\"value\")\n\n    # Validate that both fields have values\n    if not trainee_ids or len(trainee_ids) == 0:\n        print(\"ERROR: No trainees selected in the 'Trainees' field.\")\n        print(\"Please select at least one trainee to enrol.\")\n        return\n\n    if not course_refs:\n        print(\"ERROR: No courses selected in the 'Courses' field.\")\n        print(\"Please select at least one course.\")\n        return\n\n    # Check if all courses are published (have a version)\n    # If any courses are drafts, create a change set for them\n    unpublished_courses = []\n    for course_ref in course_refs:\n        if not course_ref.get(\"version\"):\n            # Course is a draft (no version)\n            course = seal.get_entity(ref=course_ref)\n            unpublished_courses.append({\n                \"id\": course_ref[\"id\"],\n                \"title\": course.get(\"title\", \"Untitled Course\")\n            })\n\n    if len(unpublished_courses) > 0:\n        # Create a single change set for all unpublished courses\n        unpublished_course_ids = [c[\"id\"] for c in unpublished_courses]\n        course_titles = \", \".join([c[\"title\"] for c in unpublished_courses])\n        \n        change_set_name = f\"Unpublished Courses: {course_titles}\"\n        seal.create_change_set(\n            entity_ids=unpublished_course_ids,\n            change_set_name=change_set_name\n        )\n        \n        print(\"ERROR: Cannot create enrollments.\")\n        print(f\"\\nThe following courses are not published:\\n  {course_titles}\")\n        print(f\"\\nA change set '{change_set_name}' has been created with these courses.\")\n        print(\"Please publish these courses first, then try creating enrollments again.\")\n        return\n\n    # Calculate due date if completion deadline is provided\n    due_date = None\n    if completion_deadline_days is not None:\n        # Calculate due date as today + number of days\n        # Format as ISO date string (YYYY-MM-DD) as required by DATE fields\n        future_date = datetime.now() + timedelta(days=completion_deadline_days)\n        due_date = future_date.strftime(\"%Y-%m-%d\")\n        print(f\"Calculated due date: {due_date} ({completion_deadline_days} days from now)\")\n\n    # Check for existing Course Enrollments for all trainees to prevent duplicates\n    print(\"Checking for existing course enrollments...\")\n\n    # Build a dictionary: trainee_id -> set of enrolled course IDs\n    trainee_enrollments = {}\n    for trainee_id in trainee_ids:\n        query_config = {\n            \"orderBy\": [\n                {\n                    \"direction\": \"DESC\",\n                    \"type\": \"metadata\",\n                    \"name\": \"CREATED_AT\",\n                }\n            ],\n            \"filters\": {\n                \"and\": [\n                    {\n                        \"or\": [\n                            {\n                                \"operator\": \"in\",\n                                \"filter\": \"fieldValue\",\n                                \"value\": [\n                                    {\n                                        \"name\": \"Trainee\",\n                                        \"operator\": \"=\",\n                                        \"value\": trainee_id,\n                                    }\n                                ],\n                            }\n                        ],\n                    },\n                    {\n                        \"or\": [\n                            {\n                                \"operator\": \"in\",\n                                \"filter\": \"kind\",\n                                \"value\": [\"INSTANCE\"],\n                            }\n                        ],\n                    },\n                    {\n                        \"or\": [\n                            {\n                                \"operator\": \"in\",\n                                \"filter\": \"type\",\n                                \"value\": [\"d69f9d72-b133-40d8-9515-265c3d977acf\"],\n                            }\n                        ],\n                    },\n                ],\n            },\n        }\n        \n        existing_enrollments = seal.search_entities(query_config)\n        \n        # Build a set of already-enrolled course IDs for this trainee\n        enrolled_course_ids = set()\n        for enrollment in existing_enrollments:\n            course_value = enrollment.get(\"fields\", {}).get(\"Course\", {}).get(\"value\", [])\n            if course_value and len(course_value) > 0:\n                enrolled_course_ids.add(course_value[0][\"id\"])\n        \n        trainee_enrollments[trainee_id] = enrolled_course_ids\n        print(f\"Found {len(existing_enrollments)} existing enrollments for trainee {trainee_id}.\")\n\n    # The template ID for the 'Course Enrollment' instances\n    # This ID is found in the 'searchConfig' of the 'Course Enrollments' field in the containing entity\n    course_enrolment_template_id = \"d69f9d72-b133-40d8-9515-265c3d977acf\"\n\n    # Prepare a list of dictionaries, where each dictionary represents a new 'Course Enrollment' instance\n    enrolment_data_to_create = []\n    skipped_enrollments = []\n\n    # 2. For each combination of 'Trainee' and 'Course' entity reference\n    for trainee_id in trainee_ids:\n        trainee = seal.get_role(trainee_id)\n        trainee_name = trainee.get(\"name\", trainee_id)\n        \n        for course_ref in course_refs:\n            # Check if this trainee is already enrolled in this course\n            enrolled_course_ids = trainee_enrollments.get(trainee_id, set())\n            if course_ref[\"id\"] in enrolled_course_ids:\n                # Skip this enrollment - it already exists\n                course = seal.get_entity(ref=course_ref)\n                course_title = course.get(\"title\", \"Untitled Course\")\n                skipped_enrollments.append(f\"{trainee_name} - {course_title}\")\n                continue\n            \n            # 3. Set the 'Trainee' USER field and 'Course' REFERENCE field values\n            # Assuming the 'Course Enrollment' template has fields named 'Trainee' (USER type),\n            # 'Course' (REFERENCE type), and 'Due Date' (DATE type).\n            new_enrolment = {\n                # The 'Trainee' field in the new instance will store the user ID (as an array for USER fields)\n                \"Trainee\": [trainee_id],\n                # The 'Course' field in the new instance will store the reference to the course entity\n                # Reference fields expect a list of reference objects, even for a single reference\n                \"Course\": [course_ref],\n            }\n\n            # If a due_date is provided, add it to the new enrolment data\n            if due_date:\n                new_enrolment[\"Due Date\"] = due_date # Assuming the field in Course Enrollment is named \"Due Date\"\n\n            enrolment_data_to_create.append(new_enrolment)\n\n    # Create course enrollments and move each to its own change set\n    if enrolment_data_to_create:\n        # Get the Training Plan's current change set ID BEFORE moving enrollments\n        training_plan_entity = seal.get_containing_entity()\n        original_change_set_id = training_plan_entity.get(\"changeSetId\")\n        training_plan_id = training_plan_entity[\"id\"]\n        \n        # Submit all enrollments to the instance submission field\n        # They will be created in the same change set as the Training Plan\n        updated_entity = seal.submit_to_instance_submission_field(\n            field_name=\"Course Enrollments\",\n            field_values_df=pd.DataFrame(enrolment_data_to_create),\n        )\n        \n        print(f\"Successfully created {len(enrolment_data_to_create)} course enrolments.\")\n        \n        # Get the newly created enrollment entity IDs from the updated entity\n        enrollment_refs = updated_entity[\"fields\"][\"Course Enrollments\"][\"value\"]\n        \n        # Get only the newly created enrollments (last N items in the array)\n        new_enrollment_refs = enrollment_refs[-len(enrolment_data_to_create):]\n        new_enrollment_ids = [ref[\"id\"] for ref in new_enrollment_refs]\n        \n        # Move each enrollment to its own change set with a descriptive name\n        for i, enrollment_id in enumerate(new_enrollment_ids):\n            # Get the enrollment entity to extract trainee and course details\n            enrollment = seal.get_entity(enrollment_id)\n            \n            # Extract trainee and course from the enrollment\n            trainee_id = enrollment[\"fields\"][\"Trainee\"][\"value\"][0]\n            course_ref = enrollment[\"fields\"][\"Course\"][\"value\"][0]\n            \n            trainee = seal.get_role(trainee_id)\n            course = seal.get_entity(ref=course_ref)\n            change_set_name = f\"{trainee['name']} - {course['title']}\"\n            \n            # Create new change set with this enrollment\n            # The updated create_change_set method will automatically use the correct workspace\n            seal.create_change_set(\n                entity_ids=[enrollment_id],\n                change_set_name=change_set_name\n            )\n        \n        print(f\"Moved {len(new_enrollment_ids)} enrollments to individual change sets.\")\n        \n        # Re-add the Training Plan to its original change set\n        # (it was moved to a new change set when the last enrollment was removed)\n        if original_change_set_id:\n            seal.add_entities_to_change_set(\n                change_set_id=original_change_set_id,\n                entity_ids=[training_plan_id]\n            )\n            print(f\"Restored Training Plan to its original change set.\")\n\n        # Set the 'Trainees' field of the containing entity to null after creating the instances\n        seal.update_field_value(\"Trainees\", [])\n        print(\"Cleared 'Trainees' field in the current Training Request.\")\n    else:\n        print(\"No enrolment data was generated for creation.\")\n\n    # Print summary of skipped enrollments if any\n    if len(skipped_enrollments) > 0:\n        print(f\"\\nSkipped {len(skipped_enrollments)} duplicate enrollment(s):\")\n        for skipped in skipped_enrollments:\n            print(f\"  - {skipped}\")\n        print(\"These enrollments already exist.\")\n\ncreate_course_enrollments()"
    }
  }
}
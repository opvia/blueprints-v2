{
  "schemaVersion": "2.0.0",
  "id": "68de7686-dd30-416a-845e-9bdef33a8f96",
  "title": "Setup Training",
  "status": "EDITABLE",
  "version": null,
  "previousVersion": null,
  "metadata": {
    "index": "0",
    "createdAt": "1970-01-01T00:00:00.000Z",
    "lastUpdatedAt": "1970-01-01T00:00:00.000Z",
    "createdByRoleId": "44444444-4444-4444-4444-444444444444",
    "lastUpdatedByRoleId": "44444444-4444-4444-4444-444444444444",
    "editors": [],
    "typeIndex": "0"
  },
  "sourceInfo": {
    "template": {
      "id": "ad8d3c88-6bf6-42d4-99cf-70c9b386460b",
      "version": "1"
    }
  },
  "fields": {},
  "kind": "INSTANCE",
  "type": {
    "ref": {
      "id": "ccc7430d-a28c-44d8-8ec9-59c63ac74ec6"
    }
  },
  "content": {
    "type": "SCRIPT_CODE",
    "value": {
      "scriptCode": "\"\"\"\nTraining System Setup Script\n\nThis script automates the complete setup of the Seal Training system:\n1. Generates API key with appropriate permissions\n2. Encrypts the API key using embedded encryption\n3. Finds the Training configuration entity\n4. Updates the Key field with the encrypted key\n\"\"\"\n\nimport base64\nimport hashlib\n\n# Entity and field configuration\nTRAINING_ENTITY_TYPE = \"Training\"\nKEY_FIELD_NAME = \"Key\"\n\n# API key configuration\nAPI_KEY_NAME = \"Training System Auto-Generated\"\nSYSTEM_PERMISSIONS = {\n    \"training\": \"BUILDER\",  # Full access to training workspace\n    \"default\": \"BUILDER\"    # Access to default/main system\n}\n\n# Symmetric encryption\nENCRYPTION_SALT = \"seal_training_salt_2025_v1\"\nENCRYPTION_PASSPHRASE = \"seal_training_encryption_key_v1\"\n\n# =============================================================================\n# ENCRYPTION FUNCTIONS\n# =============================================================================\n\ndef encrypt_api_key(api_key: str) -> str:\n    \"\"\"\n    XOR encryption with SHA-256 derived key\n    \"\"\"\n    # Create encryption key using hashlib SHA-256\n    key = hashlib.sha256((ENCRYPTION_PASSPHRASE + ENCRYPTION_SALT).encode()).hexdigest()\n    \n    # XOR encrypt each character\n    encrypted_bytes = bytes(ord(c) ^ ord(key[i % len(key)]) for i, c in enumerate(api_key))\n    \n    # Return base64 encoded result\n    return base64.b64encode(encrypted_bytes).decode()\n\n# =============================================================================\n# MAIN SETUP FUNCTION\n# =============================================================================\n\ndef setup_training_system():\n    \"\"\"\n    Complete automated setup of the training system.\n    \"\"\"\n    print(\"üéì Starting Training System Setup...\")\n    print(\"=\" * 50)\n    \n    try:\n        # Step 1: Generate API key\n        print(\"üîë Step 1: Generating API key...\")\n        \n        api_key = seal.generate_api_key(\n            name=API_KEY_NAME,\n            system_permissions=SYSTEM_PERMISSIONS\n        )\n        \n        if not api_key or not api_key.startswith(\"seal_\"):\n            raise Exception(\"Generated API key is invalid or malformed\")\n            \n        print(f\"‚úì Generated API key: {api_key[:12]}...\")\n        \n        # Step 2: Encrypt the API key\n        print(\"üîí Step 2: Encrypting API key...\")\n        \n        encrypted_key = encrypt_api_key(api_key)\n        print(\"‚úì API key encrypted successfully\")\n        \n        # Step 3: Find training configuration entity\n        print(\"üîç Step 3: Finding training configuration entity...\")\n        \n        training_entities = seal.search_entities({\n            \"filters\": {\n                \"and\": [\n                    {\"filter\": \"type\", \"operator\": \"in\", \"value\": [TRAINING_ENTITY_TYPE]},\n                    {\"filter\": \"kind\", \"operator\": \"in\", \"value\": [\"INSTANCE\"]}\n                ]\n            }\n        })\n        \n        if not training_entities:\n            raise Exception(\n                f\"No '{TRAINING_ENTITY_TYPE}' entity found. \"\n                \"Please ensure the training blueprint was installed correctly.\"\n            )\n        \n        # Use the first training entity found\n        training_entity = training_entities[0]\n        training_entity_id = training_entity[\"id\"]\n        \n        print(f\"‚úì Found training entity: {training_entity.get('title', 'Untitled')} ({training_entity_id})\")\n        \n        # Step 4: Update the Secret field\n        print(\"üíæ Step 4: Storing encrypted API key...\")\n        \n        # Check if Key field exists\n        if KEY_FIELD_NAME not in training_entity.get(\"fields\", {}):\n            raise Exception(\n                f\"'{KEY_FIELD_NAME}' field not found in training entity. \"\n                \"Please ensure the training entity has the required Key TEXT field.\"\n            )\n        \n        # Update the Secret field with encrypted key\n        seal.update_field_value_in_entity(\n            entity_id=training_entity_id,\n            field_name=KEY_FIELD_NAME,\n            field_value=encrypted_key\n        )\n        \n        print(\"‚úì Encrypted API key stored in Key field\")\n        \n        # Step 5: Final validation\n        print(\"‚úÖ Step 5: Validating setup...\")\n        \n        # Verify the encrypted key can be read back\n        updated_entity = seal.get_entity(entity_id=training_entity_id)\n        stored_secret = updated_entity[\"fields\"][KEY_FIELD_NAME][\"value\"]\n        \n        if not stored_secret:\n            raise Exception(\"Failed to store encrypted API key - field is empty\")\n            \n        print(\"‚úì Setup validation successful\")\n        \n        # Success summary\n        print(\"=\" * 50)\n        print(\"üéâ TRAINING SYSTEM SETUP COMPLETE!\")\n        print(\"=\" * 50)\n        print(f\"‚úì API Key Generated: {api_key[:12]}... (encrypted and stored)\")\n        print(f\"‚úì Training Entity: {training_entity.get('title', 'Untitled')}\")\n        print(f\"‚úì Permissions: {', '.join(f'{k}:{v}' for k, v in SYSTEM_PERMISSIONS.items())}\")\n        print(\"‚úì Training system is ready for use!\")\n        \n    except Exception as e:\n        print(\"=\" * 50)\n        print(\"‚ùå TRAINING SETUP FAILED\")\n        print(\"=\" * 50)\n        print(f\"Error: {str(e)}\")\n        print(\"\\nTroubleshooting:\")\n        print(\"1. Ensure training blueprint was installed correctly\")\n        print(\"2. Verify you have API key generation permissions\")\n        print(\"3. Check that training workspace exists\")\n        print(\"4. Confirm Secret field exists in training entity\")\n        raise\n\n# =============================================================================\n# SCRIPT EXECUTION\n# =============================================================================\n\nsetup_training_system()"
    }
  }
}
{
  "schemaVersion": "2.0.0",
  "id": "7dfe26d1-9afe-4d5b-acd3-ee1d621f056c",
  "title": "Setup Training",
  "status": "EDITABLE",
  "version": null,
  "previousVersion": null,
  "metadata": {
    "index": "0",
    "createdAt": "1970-01-01T00:00:00.000Z",
    "lastUpdatedAt": "1970-01-01T00:00:00.000Z",
    "createdByRoleId": "44444444-4444-4444-4444-444444444444",
    "lastUpdatedByRoleId": "44444444-4444-4444-4444-444444444444",
    "editors": [],
    "typeIndex": "0"
  },
  "sourceInfo": {
    "template": {
      "id": "409eb700-5474-4553-b886-5e4f84f2877d",
      "version": "1"
    }
  },
  "fields": {},
  "kind": "INSTANCE",
  "type": {
    "ref": {
      "id": "e1055cf8-3b0c-4ea4-89ee-0743d7f2aecf"
    }
  },
  "content": {
    "type": "SCRIPT_CODE",
    "value": {
      "scriptCode": "\"\"\"\nTraining System Setup & Migration Script\n\nThis script performs a complete training system setup and data migration:\n\nPART 1: SETUP\n1. Generates API key with appropriate permissions\n2. Encrypts the API key using embedded encryption\n3. Finds the Training configuration entity\n4. Updates the Key field with the encrypted key\n\nPART 2: MIGRATION\nMigrates from legacy TrainingService (database tables) to new entity-based training system.\n\nMIGRATION HIERARCHY:\nLegacy Training Request ‚Üí Training Request (INSTANCE)\n                        ‚Üí Course (INSTANCE, via Training Request's \"Courses\" field)\n                          ‚Üí Course Questions (INSTANCE_SUBMISSION, MCQ from questions)\n                        ‚Üí Course Enrollments (INSTANCE_SUBMISSION, one per trainee)\n                          ‚Üí Course Attempts (INSTANCE_SUBMISSION, one per response)\n                            ‚Üí Question Attempts (INSTANCE_SUBMISSION, one per module)\n\"\"\"\n\nimport base64\nimport hashlib\nimport pandas as pd\nimport json\n\n# =============================================================================\n# SETUP CONFIGURATION\n# =============================================================================\n\nTRAINING_SYSTEM_SLUG = \"training\"\n\n# Entity and field configuration\nTRAINING_ENTITY_TYPE = \"Training App\"\nKEY_FIELD_NAME = \"Key\"\nMAIN_SYSTEM_SLUG_FIELD_NAME = \"Main System Slug\"\n\n# API key configuration\nAPI_KEY_NAME = \"Training System Auto-Generated\"\n\n# Symmetric encryption\nENCRYPTION_SALT = \"seal_training_salt_2025_v1\"\nENCRYPTION_PASSPHRASE = \"seal_training_encryption_key_v1\"\n\n# =============================================================================\n# ENCRYPTION FUNCTIONS\n# =============================================================================\n\ndef encrypt_api_key(api_key: str) -> str:\n    \"\"\"\n    XOR encryption with SHA-256 derived key\n    \"\"\"\n    key = hashlib.sha256((ENCRYPTION_PASSPHRASE + ENCRYPTION_SALT).encode()).hexdigest()\n    encrypted_bytes = bytes(ord(c) ^ ord(key[i % len(key)]) for i, c in enumerate(api_key))\n    return base64.b64encode(encrypted_bytes).decode()\n\n# =============================================================================\n# SETUP FUNCTION\n# =============================================================================\n\ndef setup_training_system():\n    \"\"\"\n    Complete automated setup of the training system.\n    \"\"\"\n    print(\"=\" * 80)\n    print(\"PART 1: TRAINING SYSTEM SETUP\")\n    print(\"=\" * 80)\n    print()\n    \n    try:\n        print(\"üîë Step 1: Building system permissions...\")\n        \n        # Get the containing entity (Training App TEMPLATE)\n        containing_entity = seal.get_containing_entity()\n        \n        # Get the Main System Slug field value\n        main_system_slug = containing_entity.get(\"fields\", {}).get(MAIN_SYSTEM_SLUG_FIELD_NAME, {}).get(\"value\")\n        \n        if not main_system_slug or not type(main_system_slug) is str:\n            raise Exception(\n                f\"'{MAIN_SYSTEM_SLUG_FIELD_NAME}' field is missing or empty in the Training App entity. \"\n                \"Please set this field to your main workspace slug.\"\n            )\n        \n        # Build system permissions dynamically\n        # Note: Using hardcoded 'training' slug as seal module provides system ID, not slug\n        system_permissions = {\n            TRAINING_SYSTEM_SLUG: \"BUILDER\",\n            main_system_slug: \"BUILDER\"\n        }\n        \n        print(f\"  Training workspace: {TRAINING_SYSTEM_SLUG}\")\n        print(f\"  Main workspace: {main_system_slug}\")\n        print(\"‚úì System permissions configured\")\n        \n        print(\"üîë Step 2: Generating API key...\")\n        \n        api_key = seal.generate_api_key(\n            name=API_KEY_NAME,\n            system_permissions=system_permissions\n        )\n        \n        if not api_key or not api_key.startswith(\"seal_\"):\n            raise Exception(\"Generated API key is invalid or malformed\")\n            \n        print(f\"‚úì Generated API key: {api_key[:12]}...\")\n        \n        print(\"üîí Step 3: Encrypting API key...\")\n        encrypted_key = encrypt_api_key(api_key)\n        print(\"‚úì API key encrypted successfully\")\n        \n        print(\"üîç Step 4: Finding training configuration entity...\")\n        \n        training_entities = seal.search_entities({\n            \"filters\": {\n                \"and\": [\n                    {\"filter\": \"type\", \"operator\": \"in\", \"value\": [TRAINING_ENTITY_TYPE]},\n                    {\"filter\": \"kind\", \"operator\": \"in\", \"value\": [\"TEMPLATE\"]}\n                ]\n            }\n        })\n        \n        if not training_entities:\n            raise Exception(\n                f\"No '{TRAINING_ENTITY_TYPE}' entity found. \"\n                \"Please ensure the training blueprint was installed correctly.\"\n            )\n        \n        training_entity = training_entities[0]\n        training_entity_id = training_entity[\"id\"]\n        training_entity_status = training_entity.get(\"status\")\n        \n        print(f\"‚úì Found training entity: {training_entity.get('title', 'Untitled')} ({training_entity_id})\")\n        print(f\"  Status: {training_entity_status}\")\n        \n        print(\"üíæ Step 5: Preparing entity for updates...\")\n        \n        # Make entity editable (idempotent - safe to call even if already editable)\n        seal.make_entity_editable(training_entity_id)\n        # Refresh entity data after making editable\n        training_entity = seal.get_entity(entity_id=training_entity_id)\n        print(\"  ‚úì Entity is ready for updates\")\n        \n        print(\"üíæ Step 6: Storing encrypted API key...\")\n        \n        # Check if Key field exists\n        has_key_field = KEY_FIELD_NAME in training_entity.get(\"fields\", {})\n        \n        if has_key_field:\n            # Field exists - update its value\n            print(f\"  Updating existing '{KEY_FIELD_NAME}' field...\")\n            seal.update_field_value_in_entity(\n                entity_id=training_entity_id,\n                field_name=KEY_FIELD_NAME,\n                field_value=encrypted_key\n            )\n        else:\n            # Field doesn't exist - create it with the value\n            print(f\"  Creating '{KEY_FIELD_NAME}' field...\")\n            seal.add_field_to_entity(\n                entity_id=training_entity_id,\n                field_name=KEY_FIELD_NAME,\n                field_type=\"STRING\",\n                field_value=encrypted_key\n            )\n        \n        print(\"‚úì Encrypted API key stored in Key field\")\n        \n        print(\"‚úÖ Step 7: Validating setup...\")\n        \n        updated_entity = seal.get_entity(entity_id=training_entity_id)\n        stored_secret = updated_entity[\"fields\"][KEY_FIELD_NAME][\"value\"]\n        \n        if not stored_secret:\n            raise Exception(\"Failed to store encrypted API key - field is empty\")\n            \n        print(\"‚úì Setup validation successful\")\n        print()\n        print(\"üéâ TRAINING SYSTEM SETUP COMPLETE!\")\n        print()\n        \n    except Exception as e:\n        print()\n        print(\"‚ùå TRAINING SETUP FAILED\")\n        print(f\"Error: {str(e)}\")\n        print(\"\\nTroubleshooting:\")\n        print(\"1. Ensure training blueprint was installed correctly\")\n        print(\"2. Verify you have API key generation permissions\")\n        print(\"3. Check that training workspace exists\")\n        print(\"4. Confirm Key field exists in training entity\")\n        raise\n\n# =============================================================================\n# MIGRATION FUNCTIONS\n# =============================================================================\n\n# Cache for template lookups to avoid repeated searches\n_template_cache = {}\n\ndef get_template_by_type(type_name: str, title: str | None = None):\n    \"\"\"\n    Get a template entity by type name and optionally by title.\n    Caches results to avoid repeated searches.\n    \"\"\"\n    cache_key = f\"{type_name}::{title}\" if title else type_name\n    \n    if cache_key in _template_cache:\n        return _template_cache[cache_key]\n    \n    # Build filters array - use direct filter conditions (simpler format)\n    filters_and = [\n        {\"filter\": \"type\", \"operator\": \"in\", \"value\": [type_name]},\n        {\"filter\": \"kind\", \"operator\": \"in\", \"value\": [\"TEMPLATE\"]}\n    ]\n    \n    # Add text filter if title is provided (text filter searches title and other fields)\n    if title:\n        filters_and.append({\n            \"filter\": \"text\",\n            \"operator\": \"in\",\n            \"value\": [title]\n        })\n    \n    query_config = {\n        \"filters\": {\n            \"and\": filters_and\n        }\n    }\n    \n    templates = seal.search_entities(query_config)\n    \n    if not templates or len(templates) == 0:\n        if title:\n            raise Exception(f\"No template found for type '{type_name}' with title '{title}'\")\n        else:\n            raise Exception(f\"No template found for type '{type_name}'\")\n    \n    # If title was provided, filter results to exact title match (text filter is fuzzy)\n    if title:\n        exact_matches = [t for t in templates if t.get(\"title\") == title]\n        if not exact_matches:\n            raise Exception(f\"No template found for type '{type_name}' with exact title '{title}'\")\n        template = exact_matches[0]\n    else:\n        template = templates[0]\n    \n    _template_cache[cache_key] = template\n    return template\n\ndef migrate_legacy_data():\n    \"\"\"\n    Migrate legacy training data to new entity-based system.\n    \"\"\"\n    print(\"=\" * 80)\n    print(\"PART 2: LEGACY DATA MIGRATION\")\n    print(\"=\" * 80)\n    print()\n    \n    print(\"Step 1: Fetching legacy training data...\")\n    print(\"-\" * 80)\n    \n    legacy_data = seal.get_training_legacy_data()\n    training_requests = legacy_data.get(\"trainingRequests\", [])\n    \n    print(f\"‚úì Found {len(training_requests)} training requests\")\n    \n    if len(training_requests) == 0:\n        print(\"\\nNo training requests to migrate. Exiting.\")\n        return\n    \n    # Filter out cancelled requests\n    active_requests = [r for r in training_requests if r[\"status\"] != \"CANCELLED\"]\n    cancelled_count = len(training_requests) - len(active_requests)\n    \n    print(f\"‚úì Active requests: {len(active_requests)}\")\n    print(f\"‚úì Cancelled (skipped): {cancelled_count}\")\n    print()\n    \n    # Step 2: Process each training request\n    print(\"Step 2: Migrating training requests...\")\n    print(\"-\" * 80)\n    \n    for i, request in enumerate(active_requests, 1):\n        print(f\"\\n[{i}/{len(active_requests)}] Processing request {request['id'][:8]}...\")\n        \n        try:\n            migrate_training_request(request)\n            print(f\"  ‚úì Success!\")\n        except Exception as e:\n            print(f\"  ‚úó Error: {str(e)}\")\n            # Continue with next request instead of failing entire migration\n            continue\n    \n    print()\n    print(\"=\" * 80)\n    print(\"MIGRATION COMPLETE!\")\n    print(\"=\" * 80)\n\n\ndef migrate_training_request(request):\n    \"\"\"\n    Migrate a single legacy training request to the new system.\n    \n    Creates:\n    1. Training Request (INSTANCE)\n    2. Course (INSTANCE, via Training Request's \"Courses\" field)\n    3. Course Questions (INSTANCE_SUBMISSION, if questions exist)\n    4. Course Enrollments (INSTANCE_SUBMISSION, one per trainee)\n    5. Course Attempts (INSTANCE_SUBMISSION, one per response)\n    6. Question Attempts (INSTANCE_SUBMISSION, one per module per attempt)\n    \"\"\"\n    \n    # Extract request data\n    request_id = request[\"id\"]\n    entity_id = request.get(\"entity_id\")\n    entity_version = request.get(\"entity_version\")\n    message = request.get(\"message\")\n    requestor_role_id = request.get(\"requestor_role_id\")\n    requested_role_ids = request.get(\"requested_role_ids\", [])\n    authorised_trainers = request.get(\"authorised_trainers_role_ids\")\n    deadline = request.get(\"deadline\")\n    training_questions = request.get(\"trainingQuestions\", [])\n    training_responses = request.get(\"trainingResponses\", [])\n    \n    # Validate required fields\n    if not entity_id:\n        raise Exception(\"Missing entity_id in training request\")\n    \n    if not requested_role_ids or len(requested_role_ids) == 0:\n        raise Exception(\"No trainees (requested_role_ids is empty)\")\n    \n    # Get entity title for course name\n    entity = seal.get_entity(entity_id=entity_id)\n    entity_title = entity.get(\"title\", f\"Entity {entity_id[:8]}\")\n    \n    print(f\"  ‚Üí Entity: {entity_title}\")\n    print(f\"  ‚Üí Trainees: {len(requested_role_ids)}\")\n    print(f\"  ‚Üí Responses: {len(training_responses)}\")\n    print(f\"  ‚Üí Questions: {len(training_questions) if training_questions else 0}\")\n    \n    # Step 1: Create Training Request from template\n    plan_name = message or f\"Training for {entity_title}\"\n    \n    training_request_template = get_template_by_type(\"Training Request\")\n    \n    # Build field values (handle missing requestor)\n    field_values = {\n        \"Plan Name\": plan_name,\n    }\n    if requestor_role_id:\n        field_values[\"Trainers\"] = [requestor_role_id]\n    \n    training_request = seal.create_instance_from_template(\n        template_id=training_request_template[\"id\"],\n        title=plan_name,\n        field_values=field_values\n    )\n    \n    print(f\"  ‚úì Created Training Request: {training_request['id'][:8]}\")\n    \n    # Step 2: Create Course via Training Request's \"Courses\" REFERENCE field\n    course_template = get_template_by_type(\"Training Course\")\n    \n    course_df = pd.DataFrame([{\n        \"title\": entity_title,\n        \"Course Name\": entity_title,\n        \"Training Documents\": [{\"id\": entity_id, \"version\": entity_version or \"1\"}],\n        \"Passing Score %\": 100,\n        \"Requires Sign off?\": bool(authorised_trainers),\n    }])\n    \n    seal.create_from_reference_field_in_entity(\n        entity_id=training_request[\"id\"],\n        field_name=\"Courses\",\n        field_values_df=course_df,\n        type_or_template_ref={\"id\": course_template[\"id\"], \"version\": course_template.get(\"version\")},\n    )\n    \n    # Get the created course (it will be in the Courses field)\n    updated_request = seal.get_entity(entity_id=training_request[\"id\"])\n    course_refs = updated_request[\"fields\"][\"Courses\"][\"value\"]\n    course = seal.get_entity(entity_id=course_refs[0][\"id\"])\n    \n    print(f\"  ‚úì Created Course: {course['id'][:8]}\")\n    \n    # Step 3: Create Course Questions (if questions exist)\n    course_questions = []\n    if training_questions:\n        # Get the Multiple Choice Question template\n        print(f\"  ‚Üí Fetching Multiple Choice Question template...\")\n        mcq_template = get_template_by_type(\"Course Question\", \"Multiple Choice Question\")\n        print(f\"  ‚úì Found MCQ template: {mcq_template['id'][:8]}\")\n        \n        for j, question in enumerate(training_questions, 1):\n            # Find correct and incorrect answers\n            correct_answer = next(\n                (a[\"text\"] for a in question[\"answers\"] if a[\"id\"] == question[\"correctAnswerId\"]),\n                None\n            )\n            incorrect_answers = [\n                a[\"text\"] for a in question[\"answers\"] if a[\"id\"] != question[\"correctAnswerId\"]\n            ]\n            \n            # Debug: Print the incorrect_answers to see what we're passing\n            print(f\"    ‚Üí Creating module {j}/{len(training_questions)}: {question['text'][:50]}...\")\n            print(f\"      DEBUG: incorrect_answers = {incorrect_answers}, type = {type(incorrect_answers)}\")\n            \n            module_df = pd.DataFrame([{\n                \"Module Type\": \"Multiple Choice Question\",\n                \"Question\": question[\"text\"],\n                \"Correct Answer\": correct_answer,\n                \"Incorrect Options\": incorrect_answers,  # Pass as array, not JSON string\n            }])\n            seal.submit_to_instance_submission_field_in_entity(\n                entity_id=course[\"id\"],\n                field_name=\"Course Questions\",\n                field_values_df=module_df,\n                template_ref={\"id\": mcq_template[\"id\"], \"version\": mcq_template.get(\"version\")},\n            )\n            print(f\"    ‚úì Module {j} created\")\n            \n            # Get the created module from the Course Questions field\n            updated_course = seal.get_entity(entity_id=course[\"id\"])\n            module_refs = updated_course[\"fields\"][\"Course Questions\"][\"value\"]\n            module = seal.get_entity(entity_id=module_refs[-1][\"id\"])\n            \n            course_questions.append(module)\n        \n        print(f\"  ‚úì Created {len(course_questions)} Course Questions\")\n    \n    # Step 4: Create Course Enrollments (one per trainee)\n    enrollments_map = {}  # {trainee_role_id: enrollment}\n    \n    for trainee_role_id in requested_role_ids:\n        enrollment_df = pd.DataFrame([{\n            \"Trainee\": [trainee_role_id],  # USER field expects array\n            \"Course\": [{\"id\": course[\"id\"], \"version\": course.get(\"version\")}],\n            \"Due Date\": deadline,\n        }])\n        \n        seal.submit_to_instance_submission_field_in_entity(\n            entity_id=training_request[\"id\"],\n            field_name=\"Course Enrollments\",\n            field_values_df=enrollment_df,\n        )\n        \n        # Get the created enrollment from the Course Enrollments field\n        updated_request = seal.get_entity(entity_id=training_request[\"id\"])\n        enrollment_refs = updated_request[\"fields\"][\"Course Enrollments\"][\"value\"]\n        enrollment = seal.get_entity(entity_id=enrollment_refs[-1][\"id\"])\n        \n        enrollments_map[trainee_role_id] = enrollment\n    \n    print(f\"  ‚úì Created {len(enrollments_map)} Course Enrollments\")\n    \n    # Step 5: Create Course Attempts and Question Attempts (for responses)\n    if training_responses:\n        # Group responses by trainee\n        responses_by_trainee = {}\n        for response in training_responses:\n            trainee_id = response[\"responder_role_id\"]\n            if trainee_id not in responses_by_trainee:\n                responses_by_trainee[trainee_id] = []\n            responses_by_trainee[trainee_id].append(response)\n        \n        for trainee_role_id, trainee_responses in responses_by_trainee.items():\n            enrollment = enrollments_map.get(trainee_role_id)\n            if not enrollment:\n                print(f\"  ‚ö† Warning: No enrollment found for trainee {trainee_role_id[:8]}\")\n                continue\n            \n            for response in trainee_responses:\n                # Determine score and passed status\n                response_type = response[\"type\"]\n                score = 100 if response_type in [\"PASS\", \"PENDING_APPROVAL\"] else 0\n                passed = response_type in [\"PASS\", \"PENDING_APPROVAL\"]\n                completed_at = response.get(\"created_at\")\n                \n                # Create Course Attempt (without Completed At - field doesn't exist in template)\n                attempt_df = pd.DataFrame([{\n                    \"Score %\": score,\n                    \"Passed\": passed,\n                }])\n                \n                seal.submit_to_instance_submission_field_in_entity(\n                    entity_id=enrollment[\"id\"],\n                    field_name=\"Course Attempts\",\n                    field_values_df=attempt_df,\n                )\n                \n                # Get the created course attempt\n                updated_enrollment = seal.get_entity(entity_id=enrollment[\"id\"])\n                attempt_refs = updated_enrollment[\"fields\"][\"Course Attempts\"][\"value\"]\n                course_attempt = seal.get_entity(entity_id=attempt_refs[-1][\"id\"])\n                \n                # Set Completed At separately (if the field exists)\n                if completed_at and \"Completed At\" in course_attempt.get(\"fields\", {}):\n                    seal.update_field_value_in_entity(\n                        entity_id=course_attempt[\"id\"],\n                        field_name=\"Completed At\",\n                        field_value=completed_at\n                    )\n                \n                # Create Question Attempts for each Course Module\n                for module in course_questions:\n                    module_attempt_df = pd.DataFrame([{\n                        \"Module\": [{\"id\": module[\"id\"], \"version\": module.get(\"version\")}],\n                        \"Passed\": passed,\n                        \"Answer\": None,  # We don't have individual answers\n                    }])\n                    \n                    seal.submit_to_instance_submission_field_in_entity(\n                        entity_id=course_attempt[\"id\"],\n                        field_name=\"Question Attempts\",\n                        field_values_df=module_attempt_df,\n                    )\n        \n        print(f\"  ‚úì Created Course Attempts and Question Attempts\")\n        \n        # Step 6: Update Course Enrollment status and best score\n        for trainee_role_id, trainee_responses in responses_by_trainee.items():\n            enrollment = enrollments_map.get(trainee_role_id)\n            if not enrollment:\n                continue\n            \n            # Calculate best score\n            best_score = max(\n                100 if r[\"type\"] in [\"PASS\", \"PENDING_APPROVAL\"] else 0\n                for r in trainee_responses\n            )\n            \n            # Determine status based on latest response\n            latest_response = sorted(trainee_responses, key=lambda r: r[\"created_at\"])[-1]\n            if latest_response[\"type\"] == \"PASS\":\n                status_tag = \"Completed\"\n            elif latest_response[\"type\"] == \"PENDING_APPROVAL\":\n                status_tag = \"Needs Review\"\n            else:  # FAIL\n                status_tag = \"In Progress\"\n            \n            # Update enrollment\n            seal.update_field_value(enrollment[\"id\"], \"Best Score %\", best_score)\n            seal.update_status_tag(enrollment[\"id\"], status_tag)\n        \n        print(f\"  ‚úì Updated Course Enrollment statuses\")\n\n\n# =============================================================================\n# MAIN EXECUTION\n# =============================================================================\n\ndef main():\n    \"\"\"\n    Main entry point: Setup training system, then migrate legacy data.\n    \"\"\"\n    # Part 1: Setup\n    setup_training_system()\n    \n    # Part 2: Migration\n    migrate_legacy_data()\n    \n    # Final summary\n    print()\n    print(\"=\" * 80)\n    print(\"‚úÖ TRAINING SYSTEM SETUP & MIGRATION COMPLETE!\")\n    print(\"=\" * 80)\n\n# Run the script\nmain()\n"
    }
  }
}